[1 Ogólne] 

Architektura oparta o message bus.
    - Wymiana wiadomości pomiędzy modułami.

Klasa Core zawierająca główne metody gry.
    - Inicjalizacja modułów.
    - Pętla o stałym kroku czasowym (podział na fixed i frame update).

[2 Moduły]

Moduł terminala reagujący na większość eventów przesyłanych przez message bus.

Moduł inputu obsługujący klawiaturę, mysz i gamepad przy użyciu GLFW:
    - Wrapping eventów GLFW dla myszy i klawiatury + dodanie włąsnych eventów.
    - Własny system eventów dla gamepada.

Moduł systemów gry - implementacja architektury ECS:
    - Encje przechowujące wskaźniki na komponenty.
    - Polimorficzne komponenty - kontenery na dane.
    - Systemy iterujące po encjach, i działające na jednym lub kilku komponentach.
    - Pełna kontrola nad kolejnością wykonywana się systemów.

Moduł magazynu przechowujący obiekty w zorganizowany sposób:
    - bardzo tymczasowa implementacja, wiele potencjalnie niebezpiecznych rozwiązań.

Moduł systemu plików, wczytujący wszystkie potrzebne pliki:
    - shadery (fstream)
    - siatki (Assimp)
    - tekstury (stbi_load)
    - animacje (Assimp)
    - audio (fstream)
    - zapis danych do unordered map każdego typu, w której kluczem jest podana ścieżka do pliku (lub ścieżka/nazwa_mesha) dla siatek
    - dostęp do wskaźników do danych przez message bus

Moduł sceny - implementacja grafu sceny:
    - update komponentów niezależny od ECS, inny sposób iteracji, wywołuję się przed systemami.
    - implementacja flagi dirty w celu optymalizacji.

Moduł renderera - podstawowa implementacja renderingu OpenGL:
    - Obsługa renderingu wczytanych modeli
    - Kolejkowanie draw calli z renderer systemu (przygotowanie do sortowania i occlusion cullingu)
    - Enkapsulacja shader programów w klasę shader
    - Klasa materiału przechowująca uniformy dla danego shadera (i weryfikacja czy dany uniform istnieje)
    - Obsługa tekstur
    - Obsługa UBO dla macierzy widoku i projekcji
    - Billboarding quadów (oraz przy okazji ich instancing)
    - Obsługa skyboxa


Moduł audio:
    - odpowiedź na wiadomości przesyłane przez MessageBus odnoszących się do audio
    - wrap dla wielu funkcji biblioteki OpenAL-soft, komunikacja z urządzeniami audio
    - sukcesywne wysyłanie zmian na urządzenia tylko w przypadku takiej potrzeby (wiele zmian na raz)
    - odpowiedzialność za współdzielenie jednego buforu z plikiem dźwiękowym przez wiele źródeł na raz

[3 Systemy]

Detekcja kolizji:
    - Kolizje sfer, podział na na kolizje rozważane jednostronnie i dwustronnie.
    - Docelowo zostaną zaimplemetowane także inne bryły.

AudioListener:
    - słuchacz Audio w przestrzeni 3d
    - uabstrakcyjnienie obiektu Listener'a z biblioteki OpenAL-soft, umożliwiające modyfikacje jego atrybutów
    - implementacja dirty flagi w celu uniknięcia niepotrzebnej komunikacji z urządzeniem audio

AudioSource:
    - źródło audio w przestrzenie 3d
    - uabstrakcyjnienie obiektów Source'a z biblioteki OpenAL-soft, umożliwiające modyfikacje jego atrybutów
    - możliwość przynależenia do wielu AudioListenerów na raz - obsłużone przez AudioModule
    - kolejkowanie utworów do odtworzenia
    - implementacja dirty flagi w celu uniknięcia niepotrzebnej komunikacji z urządzeniem audio