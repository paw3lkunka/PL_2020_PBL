// Trying to make ends meet, you decide to take part in the lucrative river smuggling job. On a war-torn border, cargo transferring is more profitable than selling gold, but the risk is proportionally huge. You observe how the conflict between two countries unfolds, and on certain occasions interfere with it. The outcome of the war may be more dependent on your actions than you first come to believe.
auto uiShader = objectModule.newShader("UiStandard", "Resources/Shaders/UiStandard/UiStandard.vert", "Resources/Shaders/UiStandard/UiStandard.frag");
auto textShader = objectModule.newShader("TextStandard", "Resources/Shaders/TextStandard/TextStandard.vert", "Resources/Shaders/TextStandard/TextStandard.frag");
auto josefin = objectModule.newFont("Resources/Fonts/JosefinSans-Regular.ttf", 128, "JosefinSans-Regular");
auto courier = objectModule.newFont("Resources/Fonts/CourierNew.ttf", 128, "CourierNew");


objectModule.newEntity(4, "Camera");
{
    auto c = objectModule.newEmptyComponentForLastEntity<Camera>();
        ViewFrustum& frustum = c->getFrustumModifiable();
            frustum.farPlane = 2500.0f;
            frustum.nearPlane = 0.1f;
            frustum.fieldOfView = 80.0f;
            frustum.aspectRatio = (float)GetCore().windowWidth / (float)GetCore().windowHeight;
        c->getProjectionModeModifiable() = CameraProjection::Perspective;

    
    auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
        t->getLocalPositionModifiable() = glm::vec3(0.0f, 0.0f, 0.0f);
        t->setParent(&sceneModule.rootNode);

    auto li = objectModule.newEmptyComponentForLastEntity<AudioListener>();
        li->getGainModifiable() = 1.0f;
        li->getVelocityModifiable();
        li->getPositionModifiable();
        li->getAtModifiable();
        li->getUpModifiable();

    auto so3 = objectModule.newEmptyComponentForLastEntity<AudioSource>();
        so3->audioClip = "Resources/Audios/mainTheme.wav";
        so3->getIsRelativeModifiable() = true;
        so3->getGainModifiable() = 0.75f;
        so3->getIsLoopingModifiable() = true;
        so3->autoPlay = true;
        so3->continuePlaying = true;
}

TextureCreateInfo info = {};
    info.format = GL_RGBA;
    info.generateMipmaps = false;
    info.magFilter = GL_LINEAR;
    info.minFilter = GL_LINEAR;
    info.wrapMode = GL_CLAMP_TO_EDGE;

auto rect_border = objectModule.newTexture("Resources/Sprites/rect_border.png", info);
auto paperTex = objectModule.newTexture("Resources/Sprites/paper.png", info);
auto textMaterial = objectModule.newMaterial(textShader, "TextMaterial", RenderType::Transparent);
    textMaterial->setVec4("color", {0.0f, 0.0f, 0.0f, 1.0f});

objectModule.newEntity(2, "Background");
{
    auto rt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
        rt->getAnchorModifiable() = {0.5f, 0.5f};
        rt->getSizeModifiable() = {1920, 1080};
        uiModule.rootNodes.push_back(rt);

    auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
        auto mat = objectModule.newMaterial(uiShader, "UiBg", RenderType::Opaque);
        mat->setTexture("sprite", paperTex);
        mat->setVec4("color", {1.0f, 1.0f, 1.0f, 1.0f});
        ui->material = mat;
}
float rotation = glm::radians(1.5f);
float xPos = -550.0f;

objectModule.newEntity(2, "Title");
{
    auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
        crt->getLocalPositionModifiable() = {-140.0f, -150.0f};
        crt->getAnchorModifiable() = {0.5f, 1.0f};
        crt->getLocalRotationModifiable() = rotation;
        crt->getSizeModifiable() = {0.8f, 0.8f};
        uiModule.rootNodes.push_back(crt);

    auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
        cui->material = textMaterial;
        cui->mesh.font = josefin;
        cui->mesh.text = "Intro";
}



objectModule.newEntity(2, "Text");
{
    auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
        crt->getLocalPositionModifiable() = {xPos, -270.0f};
        crt->getAnchorModifiable() = {0.5f, 1.0f};
        crt->getSizeModifiable() = {0.25f, 0.25f};
        crt->getLocalRotationModifiable() = rotation;
        uiModule.rootNodes.push_back(crt);

    auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
        cui->material = textMaterial;
        cui->mesh.font = courier;
        cui->mesh.text = "Trying to make ends meet, you decide to take part";
}

objectModule.newEntity(2, "Text_2");
{
    auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
        crt->getLocalPositionModifiable() = {xPos, -310.0f};
        crt->getAnchorModifiable() = {0.5f, 1.0f};
        crt->getSizeModifiable() = {0.25f, 0.25f};
        crt->getLocalRotationModifiable() = rotation;
        uiModule.rootNodes.push_back(crt);

    auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
        cui->material = textMaterial;
        cui->mesh.font = courier;
        cui->mesh.text = "in the lucrative river smuggling job. On a war-torn border,";
}

objectModule.newEntity(2, "Text_3");
{
    auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
        crt->getLocalPositionModifiable() = {xPos, -350.0f};
        crt->getAnchorModifiable() = {0.5f, 1.0f};
        crt->getSizeModifiable() = {0.25f, 0.25f};
        crt->getLocalRotationModifiable() = rotation;
        uiModule.rootNodes.push_back(crt);

    auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
        cui->material = textMaterial;
        cui->mesh.font = courier;
        cui->mesh.text = "cargo transferring is more profitable than selling gold,";
}

objectModule.newEntity(2, "Text_4");
{
    auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
        crt->getLocalPositionModifiable() = {xPos, -390.0f};
        crt->getAnchorModifiable() = {0.5f, 1.0f};
        crt->getSizeModifiable() = {0.25f, 0.25f};
        crt->getLocalRotationModifiable() = rotation;
        uiModule.rootNodes.push_back(crt);

    auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
        cui->material = textMaterial;
        cui->mesh.font = courier;
        cui->mesh.text = "but the risk is proportionally huge. You observe how";
}

objectModule.newEntity(2, "Text_5");
{
    auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
        crt->getLocalPositionModifiable() = {xPos, -430.0f};
        crt->getAnchorModifiable() = {0.5f, 1.0f};
        crt->getSizeModifiable() = {0.25f, 0.25f};
        crt->getLocalRotationModifiable() = rotation;
        uiModule.rootNodes.push_back(crt);

    auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
        cui->material = textMaterial;
        cui->mesh.font = courier;
        cui->mesh.text = "the conflict between two countries unfolds,";
}

objectModule.newEntity(2, "Text_6");
{
    auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
        crt->getLocalPositionModifiable() = {xPos, -470.0f};
        crt->getAnchorModifiable() = {0.5f, 1.0f};
        crt->getSizeModifiable() = {0.25f, 0.25f};
        crt->getLocalRotationModifiable() = rotation;
        uiModule.rootNodes.push_back(crt);

    auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
        cui->material = textMaterial;
        cui->mesh.font = courier;
        cui->mesh.text = "and on certain occasions interfere with it.";
}

objectModule.newEntity(2, "Text_7");
{
    auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
        crt->getLocalPositionModifiable() = {xPos, -510.0f};
        crt->getAnchorModifiable() = {0.5f, 1.0f};
        crt->getSizeModifiable() = {0.25f, 0.25f};
        crt->getLocalRotationModifiable() = rotation;
        uiModule.rootNodes.push_back(crt);

    auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
        cui->material = textMaterial;
        cui->mesh.font = courier;
        cui->mesh.text = "The outcome of the war may be more dependent on your actions";
}

objectModule.newEntity(2, "Text_8");
{
    auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
        crt->getLocalPositionModifiable() = {xPos, -550.0f};
        crt->getAnchorModifiable() = {0.5f, 1.0f};
        crt->getSizeModifiable() = {0.25f, 0.25f};
        crt->getLocalRotationModifiable() = rotation;
        uiModule.rootNodes.push_back(crt);

    auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
        cui->material = textMaterial;
        cui->mesh.font = courier;
        cui->mesh.text = "than you first come to believe.";
}

objectModule.newEntity(3, "Continue_Button");
{
    auto rt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
        rt->getLocalPositionModifiable() = {470, -208};
        rt->getAnchorModifiable() = {0.5f, 0.5f};
        rt->getLocalRotationModifiable() = glm::radians(-22.0f);
        rt->getSizeModifiable() = {250.0f, 100.0f};
        uiModule.rootNodes.push_back(rt);

    auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
        auto buttMaterial = objectModule.newMaterial(uiShader, "optionsMat", RenderType::Transparent);
        buttMaterial->setTexture("sprite", rect_border);
        buttMaterial->setVec4("color", {1.0f, 0.0f, 1.0f, 0.5f});
        ui->material = buttMaterial;

    auto buttonsSound = objectModule.newEmptyComponentForLastEntity<AudioSource>();
        buttonsSound->audioClip = "Resources/Audios/menu_buttonClick.wav";
        buttonsSound->getIsRelativeModifiable() = true;
        buttonsSound->getGainModifiable() = 1.0f;
        buttonsSound->getIsLoopingModifiable() = false;
        buttonsSound->autoPlay = false;
    
    auto butt = objectModule.newEmptyComponentForLastEntity<Button>();
        butt->baseColor = {0.733f, 0.066f, 0.066f, 1.0f};
        butt->highlightedColor = {0.858f, 0.078f, 0.078f, 1.0f};
        butt->inactiveColor = {0.733f, 0.066f, 0.066f, 1.0f};
        butt->onClickColor = {0.654f, 0.066f, 0.066f, 1.0f};
        butt->onClickEvents.push_back(Message(Event::LOAD_SCENE, Scenes::selectCargoScene));
        butt->onClickEvents.push_back( Message(Event::AUDIO_SOURCE_PLAY_ONE_SHOT, buttonsSound) );

    objectModule.newEntity(2, "Continue_Button_Text");
    {
        auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            crt->getLocalPositionModifiable() = {-108.0f, -15.0f};
            crt->getSizeModifiable() = {0.35f, 0.35f};
            crt->setParent(rt);

        auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
            cui->material = objectModule.newMaterial(textShader, "Stamp", RenderType::Transparent);
                cui->material->setVec4("color", {0.733f, 0.066f, 0.066f, 1.0f});
            cui->mesh.font = courier;
            cui->mesh.text = "CONTINUE";
    }
}