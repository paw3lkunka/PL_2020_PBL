
objectModule.newModel("Resources/Terrain/Test01.obj");
objectModule.newModel("Resources/Models/Rocks/rocks_03.FBX");

auto standardPbrShader = objectModule.newShader("Resources/Shaders/StandardPBR/StandardPBR.vert", "Resources/Shaders/StandardPBR/StandardPBR.frag");

TextureCreateInfo texCreateInfo = {};
texCreateInfo.generateMipmaps = true;
texCreateInfo.magFilter = GL_LINEAR;
texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
texCreateInfo.wrapMode = GL_REPEAT;

auto grass1Diffuse = objectModule.newTexture("Resources/Textures/grassRock/aerial_grass_rock_diff_2k.png", texCreateInfo);
auto grass1Normal = objectModule.newTexture("Resources/Textures/grassRock/aerial_grass_rock_nor_2k.png", texCreateInfo);
auto grass1Specular = objectModule.newTexture("Resources/Textures/grassRock/aerial_grass_rock_OccRoughMet_2k.png", texCreateInfo);

auto gravel1Diffuse = objectModule.newTexture("Resources/Textures/rockGround/rock_ground_02_diff_2k.png", texCreateInfo);
auto gravel1Normal = objectModule.newTexture("Resources/Textures/rockGround/rock_ground_02_nor_2k.png", texCreateInfo);
auto gravel1Specular = objectModule.newTexture("Resources/Textures/rockGround/rock_ground_02_occRouMet.png", texCreateInfo);

auto rocks1Diffuse = objectModule.newTexture("Resources/Textures/rock/rock_04_diff_2k.png", texCreateInfo);
auto rocks1Normal = objectModule.newTexture("Resources/Textures/rock/rock_04_nor_2k.png", texCreateInfo);
auto rocks1Specular = objectModule.newTexture("Resources/Textures/rock/rock_04_occRouMet.png", texCreateInfo);

auto water1Diffuse = objectModule.newTexture("Resources/Textures/water/Water_001_COLOR.png", texCreateInfo);
auto water1Normal = objectModule.newTexture("Resources/Textures/water/Water_001_NORM.png", texCreateInfo);
auto water1OccRouSpec = objectModule.newTexture("Resources/Textures/water/Water_001_OccRouSpec.png", texCreateInfo);

auto whiteTex = objectModule.newTexture("Resources/Textures/white.png", texCreateInfo);
auto blackTex = objectModule.newTexture("Resources/Textures/black.png", texCreateInfo);
auto bumpTex = objectModule.newTexture("Resources/Textures/bump.png", texCreateInfo);
auto occroumetTex = objectModule.newTexture("Resources/Textures/occroumet.png", texCreateInfo);

Material* whiteMat = objectModule.newMaterial(standardPbrShader, "whhiteMat", RenderType::Opaque);
whiteMat->setTexture("diffuse", whiteTex);
whiteMat->setTexture("normal", bumpTex);
whiteMat->setTexture("occRouMet", occroumetTex);

Material* grassMat = objectModule.newMaterial(standardPbrShader, "grassMat", RenderType::Opaque);
grassMat->setTexture("diffuse", grass1Diffuse);
grassMat->setTexture("normal", grass1Normal);
grassMat->setTexture("occRouMet", grass1Specular);

Material* gravelMat = objectModule.newMaterial(standardPbrShader, "gravelMat", RenderType::Opaque);
gravelMat->setTexture("diffuse", gravel1Diffuse);
gravelMat->setTexture("normal", gravel1Normal);
gravelMat->setTexture("occRouMet", gravel1Specular);

Material* rocksMat = objectModule.newMaterial(standardPbrShader, "rocksMat", RenderType::Opaque);
rocksMat->setTexture("diffuse", rocks1Diffuse);
rocksMat->setTexture("normal", rocks1Normal);
rocksMat->setTexture("occRouMet", rocks1Specular);

Material* waterMat = objectModule.newMaterial(standardPbrShader, "waterMat", RenderType::Transparent);
waterMat->setTexture("diffuse", water1Diffuse);
waterMat->setTexture("normal", water1Normal);
waterMat->setTexture("occRouMet", water1OccRouSpec);

TextureCreateInfo i = {};
i.minFilter = GL_LINEAR;
i.magFilter = GL_LINEAR;
i.wrapMode= GL_CLAMP_TO_EDGE;
i.generateMipmaps = false;
CubemapHdr* hdrCubemap = objectModule.newHdrCubemap(i,  "Resources/Textures/skybox_02/nz.hdr", 
                                                        "Resources/Textures/skybox_02/nx.hdr", 
                                                        "Resources/Textures/skybox_02/px.hdr",
                                                        "Resources/Textures/skybox_02/pz.hdr",
                                                        "Resources/Textures/skybox_02/py.hdr",
                                                        "Resources/Textures/skybox_02/ny.hdr");

auto skyboxShader = objectModule.newShader("Resources/Shaders/SkyboxCubemap/SkyboxCubemap.vert", "Resources/Shaders/SkyboxCubemap/SkyboxCubemap.frag");

Material* hdrSkyboxMat = objectModule.newMaterial(skyboxShader, "skyboxHdrMat", RenderType::Opaque);
hdrSkyboxMat->setTexture("cubemap", hdrCubemap);

Entity* terrain = objectModule.newEntity(1, "Terrain");
{
    auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
    t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(0, 0, 0));
    t->setParent(&sceneModule.rootNode);
}

{
    Entity* entity = objectModule.getEntityPtrByName("defaultobject");
    auto mr = entity->getComponentPtr<MeshRenderer>();
        mr->material = grassMat;

    auto t = entity->getComponentPtr<Transform>();
        t->setParent(terrain->getComponentPtr<Transform>());
}

{
    auto entity = objectModule.getEntityPtrByName("rocks_03");

    auto mr = entity->getComponentPtr<MeshRenderer>();
        mr->material = whiteMat;

    auto t = entity->getComponentPtr<Transform>();
        t->setParent(terrain->getComponentPtr<Transform>());
}

objectModule.newEntity(2, "directionalLight");
{
    auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
        t->getLocalRotationModifiable() *= glm::angleAxis(glm::radians(210.0f) , glm::vec3(0.0f, 1.0f, 0.0f));
        t->getLocalRotationModifiable() *= glm::angleAxis(glm::radians(15.0f) , glm::vec3(1.0f, 0.0f, 0.0f));
        t->setParent(&sceneModule.rootNode);

    auto l = objectModule.newEmptyComponentForLastEntity<Light>();
        l->lightType = LightType::Directional;
        l->intensity = 1.0f;
        l->color = {1.0f, 1.0f, 1.0f};
}

objectModule.newEntity(4, "Camera");
{
    auto c = objectModule.newEmptyComponentForLastEntity<Camera>();
    ViewFrustum& frustum = c->getFrustumModifiable();
        frustum.farPlane = 2500.0f;
        frustum.nearPlane = 0.1f;
        frustum.fieldOfView = 80.0f;
        frustum.aspectRatio = (float)GetCore().windowWidth / (float)GetCore().windowHeight;
        c->getProjectionModeModifiable() = CameraProjection::Perspective;

    auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
        t->getLocalPositionModifiable() = glm::vec3(0.0f, 0.0f, 0.0f);
        t->setParent(&sceneModule.rootNode);

    auto li = objectModule.newEmptyComponentForLastEntity<AudioListener>();
        li->getIsCurrentModifiable() = true;
        li->getGainModifiable() = 1.0f;
        li->getVelocityModifiable();
        li->getPositionModifiable();
        li->getAtModifiable();
        li->getUpModifiable();
}