objectModule.newAudioClip("Resources/Audios/river.wav");
objectModule.newEntity(4, "Camera");
{
    auto c = objectModule.newEmptyComponentForLastEntity<Camera>();
        ViewFrustum& frustum = c->getFrustumModifiable();
            frustum.farPlane = 2500.0f;
            frustum.nearPlane = 0.1f;
            frustum.fieldOfView = 80.0f;
            frustum.aspectRatio = (float)GetCore().windowWidth / (float)GetCore().windowHeight;
        c->getProjectionModeModifiable() = CameraProjection::Perspective;

    
    auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
        t->getLocalPositionModifiable() = glm::vec3(0.0f, 0.0f, 0.0f);
        t->setParent(&sceneModule.rootNode);

    auto li = objectModule.newEmptyComponentForLastEntity<AudioListener>();
        li->getIsCurrentModifiable() = true;
        li->getGainModifiable() = 1.0f;
        li->getVelocityModifiable();
        li->getPositionModifiable();
        li->getAtModifiable();
        li->getUpModifiable();
}

objectModule.newEntity(2, "RiverFlow");
{
    auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
        t->getLocalPositionModifiable() = glm::vec3(0.0f, 0.0f, 0.0f);
        t->setParent(&sceneModule.rootNode);
    auto so3 = objectModule.newEmptyComponentForLastEntity<AudioSource>();
        so3->getListenersModifiable().push_back(objectModule.getEntityPtrByName("Camera")->getComponentPtr<AudioListener>());
        so3->getClipsModifiable().push_back("Resources/Audios/river.wav");
        so3->getIsRelativeModifiable() = true;
        so3->getGainModifiable() = 2.0f;
        so3->getIsLoopingModifiable() = true;
}

    auto uiShader = objectModule.newShader("UiStandard", "Resources/Shaders/UiStandard/UiStandard.vert", "Resources/Shaders/UiStandard/UiStandard.frag");
    auto uiFading = objectModule.newShader("UiFading", "Resources/Shaders/UiFading/UiFading.vert", "Resources/Shaders/UiFading/UiFading.frag");
    auto textShader = objectModule.newShader("TextStandard", "Resources/Shaders/TextStandard/TextStandard.vert", "Resources/Shaders/TextStandard/TextStandard.frag");
    auto josefin = objectModule.newFont("Resources/Fonts/JosefinSans-Regular.ttf", 128, "JosefinSans-Regular");
    auto courier = objectModule.newFont("Resources/Fonts/CourierNew.ttf", 128, "CourierNew");

    glm::vec4 baseColor = {0.733f, 0.066f, 0.066f, 1.0f};
    glm::vec4 inactiveColor = {0.733f, 0.066f, 0.066f, 1.0f};
    glm::vec4 highlightedColor = {0.858f, 0.078f, 0.078f, 1.0f};
    glm::vec4 onClickColor = {0.654f, 0.066f, 0.066f, 1.0f};

    TextureCreateInfo info = {};
    info.format = GL_RGBA;
    info.generateMipmaps = false;
    info.magFilter = GL_LINEAR;
    info.minFilter = GL_LINEAR;
    info.wrapMode = GL_CLAMP_TO_EDGE;

    auto rect_border = objectModule.newTexture("Resources/Sprites/rect_border.png", info);
    auto paperTex = objectModule.newTexture("Resources/Sprites/paper.png", info);
    auto photo = objectModule.newTexture("Resources/Sprites/thePhoto.png", info);
    auto photo2 = objectModule.newTexture("Resources/Sprites/thePhoto2.png", info);
    auto photo3 = objectModule.newTexture("Resources/Sprites/thePhoto3.png", info);

    auto textMaterial = objectModule.newMaterial(textShader, "TextMaterial", RenderType::Transparent);
    textMaterial->setVec4("color", baseColor);
    auto textMaterialBlack = objectModule.newMaterial(textShader, "TextMaterialBlack", RenderType::Transparent);
    textMaterialBlack->setVec4("color", {0.0f, 0.0f, 0.0f, 1.0f});

    objectModule.newEntity(2, "Ui_Menu_Background");
    {
        auto rt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            rt->getAnchorModifiable() = {0.5f, 0.5f};
            rt->getSizeModifiable() = {1920, 1080};
            uiModule.rootNodes.push_back(rt);

        auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
            auto mat = objectModule.newMaterial(uiShader, "UiBg", RenderType::Opaque);
            mat->setTexture("sprite", paperTex);
            mat->setVec4("color", {1.0f, 1.0f, 1.0f, 1.0f});
            ui->material = mat;
    }

    objectModule.newEntity(2, "Title");
    {
        auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            crt->getLocalPositionModifiable() = {30, -180.0f};
            crt->getAnchorModifiable() = {0.0f, 1.0f};
            crt->getSizeModifiable() = {1.25f, 1.25f};
            uiModule.rootNodes.push_back(crt);

        auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
            cui->material = textMaterialBlack;
            cui->mesh.font = josefin;
            cui->mesh.text = "Current";
    }

    objectModule.newEntity(2, "photo");
    {
        auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            crt->getLocalPositionModifiable() = {243.0f, 103.0f};
            crt->getAnchorModifiable() = {0.5f, 0.5f};
            crt->getSizeModifiable() = {450.0f, 450.0f};
            crt->getLocalRotationModifiable() = glm::radians(1.0f);
            uiModule.rootNodes.push_back(crt);

        auto cui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
            cui->material = objectModule.newMaterial(uiShader, "photomat", RenderType::Transparent);
            cui->material->setTexture("sprite", photo);
            cui->material->setVec4("color", {1.0f, 1.0f, 1.0f, 1.0f});
    }

    objectModule.newEntity(2, "photo2");
    {
        auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            crt->getLocalPositionModifiable() = {535.0f, -185.0f};
            crt->getAnchorModifiable() = {0.5f, 0.5f};
            crt->getSizeModifiable() = {450.0f, 450.0f};
            crt->getLocalRotationModifiable() = glm::radians(-2.5f);
            uiModule.rootNodes.push_back(crt);

        auto cui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
            cui->material = objectModule.newMaterial(uiShader, "photo2Mat", RenderType::Transparent);
            cui->material->setTexture("sprite", photo2);
            cui->material->setVec4("color", {1.0f, 1.0f, 1.0f, 1.0f});
    }

    objectModule.newEntity(2, "photo3");
    {
        auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            crt->getLocalPositionModifiable() = {-65.0f, -134.0f};
            crt->getAnchorModifiable() = {0.5f, 0.5f};
            crt->getSizeModifiable() = {450.0f, 450.0f};
            crt->getLocalRotationModifiable() = glm::radians(2.5f);
            uiModule.rootNodes.push_back(crt);

        auto cui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
            cui->material = objectModule.newMaterial(uiShader, "photo3Mat", RenderType::Transparent);
            cui->material->setTexture("sprite", photo3);
            cui->material->setVec4("color", {1.0f, 1.0f, 1.0f, 1.0f});
    }
{
    objectModule.newEntity(2, "Menu_Buttons");
    auto buttonsRoot = objectModule.newEmptyComponentForLastEntity<RectTransform>();
    objectModule.newEmptyComponentForLastEntity<UiSortingGroup>();
    uiModule.rootNodes.push_back(buttonsRoot);

    objectModule.newEntity(3, "Start_Button");
    {
        auto rt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            rt->getLocalPositionModifiable() = {168, 357};
            rt->getSizeModifiable() = {250.0f, 100.0f};
            rt->getLocalRotationModifiable() = glm::radians(1.0f);
            rt->setParent(buttonsRoot);

        auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
            auto buttMaterial = objectModule.newMaterial(uiShader, "startMat", RenderType::Transparent);
            buttMaterial->setTexture("sprite", rect_border);
            buttMaterial->setVec4("color", {1.0f, 0.0f, 1.0f, 0.5f});
            ui->material = buttMaterial;
        
        auto butt = objectModule.newEmptyComponentForLastEntity<Button>();
            butt->baseColor = baseColor;
            butt->inactiveColor = inactiveColor;
            butt->highlightedColor = highlightedColor;
            butt->onClickColor = onClickColor;
            butt->onClickEvents.push_back(Message(Event::LOAD_SCENE, Scenes::introScene));

        objectModule.newEntity(2, "Start_Button_Text");
        {
            auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
                crt->getLocalPositionModifiable() = {-77.0f, -15.0f};
                crt->getSizeModifiable() = {0.4f, 0.4f};
                crt->setParent(rt);

            auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
                cui->material = textMaterial;
                cui->mesh.font = courier;
                cui->mesh.text = "Start";
        }
    }

    objectModule.newEntity(3, "Options_Button");
    {
        auto rt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            rt->getLocalPositionModifiable() = {180, 230};
            rt->getSizeModifiable() = {250.0f, 100.0f};
            rt->getLocalRotationModifiable() = glm::radians(1.5f);
            rt->setParent(buttonsRoot);

        auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
            auto buttMaterial = objectModule.newMaterial(uiShader, "optionsMat", RenderType::Transparent);
            buttMaterial->setTexture("sprite", rect_border);
            buttMaterial->setVec4("color", {1.0f, 0.0f, 1.0f, 0.5f});
            ui->material = buttMaterial;
        
        auto butt = objectModule.newEmptyComponentForLastEntity<Button>();
            butt->baseColor = baseColor;
            butt->inactiveColor = inactiveColor;
            butt->highlightedColor = highlightedColor;
            butt->onClickColor = onClickColor;
            butt->onClickEvents.push_back(Message(Event::AUDIO_SOURCE_STOP, objectModule.getEntityPtrByName("RiverFlow")->getComponentPtr<AudioSource>()));

        objectModule.newEntity(2, "Options_Button_Text");
        {
            auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
                crt->getLocalPositionModifiable() = {-108.0f, -15.0f};
                crt->getSizeModifiable() = {0.4f, 0.4f};
                crt->setParent(rt);

            auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
                cui->material = textMaterial;
                cui->mesh.font = courier;
                cui->mesh.text = "Options";
        }
    }

    objectModule.newEntity(3, "Exit_Button");
    {
        auto rt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            rt->getLocalPositionModifiable() = {161, 105};
            rt->getSizeModifiable() = {250.0f, 100.0f};
            rt->getLocalRotationModifiable() = glm::radians(0.5f);
            rt->setParent(buttonsRoot);
        
        auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
            auto buttMaterial = objectModule.newMaterial(uiShader, "exitMat", RenderType::Transparent);
            buttMaterial->setTexture("sprite", rect_border);
            buttMaterial->setVec4("color", {1.0f, 0.0f, 1.0f, 0.5f});
            ui->material = buttMaterial;
        
        auto butt = objectModule.newEmptyComponentForLastEntity<Button>();
            butt->baseColor = baseColor;
            butt->inactiveColor = inactiveColor;
            butt->highlightedColor = highlightedColor;
            butt->onClickColor = onClickColor;
            butt->onClickEvents.push_back(Message(Event::AUDIO_SOURCE_STOP, objectModule.getEntityPtrByName("RiverFlow")->getComponentPtr<AudioSource>()));
            butt->onClickEvents.push_back(Message(Event::EXIT_GAME));

        objectModule.newEntity(2, "Exit_Button_Text");
        {
            auto crt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
                crt->getLocalPositionModifiable() = {-65.0f, -16.0f};
                crt->getSizeModifiable() = {0.4f, 0.4f};
                crt->setParent(rt);

            auto cui = objectModule.newEmptyComponentForLastEntity<TextRenderer>();
                cui->material = textMaterial;
                cui->mesh.font = courier;
                cui->mesh.text = "Exit";
        }
    }
}