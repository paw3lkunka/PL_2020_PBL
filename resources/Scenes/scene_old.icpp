#pragma region Data Loading
    objectModule.newModel("Resources/Models/unit_sphere.FBX");
    objectModule.newModel("Resources/Models/Cliffs.FBX");
    objectModule.newModel("Resources/Models/Left_bank.FBX");
    objectModule.newModel("Resources/Models/Right_bank.FBX");
    objectModule.newModel("Resources/Models/Riverbed.FBX");
    objectModule.newModel("Resources/Models/Water.FBX");
    objectModule.newModel("Resources/Models/Box.FBX");
    objectModule.newModel("Resources/Models/House Dancing.FBX");
    objectModule.newModel("Resources/Models/Rocks/rocks_03.FBX");
    objectModule.newModel("Resources/Models/RadioactiveBarrel/Barrel_01.FBX");
    objectModule.newModel("Resources/Models/test_riverbed.FBX");
    objectModule.newAudioClip("Resources/Audios/shingeki.wav");
    objectModule.newAudioClip("Resources/Audios/test.wav");

    auto unlitColor = objectModule.newShader("Resources/Shaders/UnlitColor/UnlitColor.vert", "Resources/Shaders/UnlitColor/UnlitColor.frag");

    auto unlitSkinned = objectModule.newShader("Resources/Shaders/UnlitSkinned/UnlitSkinned.vert", "Resources/Shaders/UnlitSkinned/UnlitSkinned.frag");

    auto unlitTexture = objectModule.newShader("Resources/Shaders/UnlitTexture/UnlitTexture.vert", "Resources/Shaders/UnlitTexture/UnlitTexture.frag");

    auto unlitInstanced = objectModule.newShader("Resources/Shaders/UnlitBillboardInstanced/UnlitBillboardInstanced.vert", "Resources/Shaders/UnlitBillboardInstanced/UnlitBillboardInstanced.frag");
    
    auto skyboxShader = objectModule.newShader("Resources/Shaders/SkyboxCubemap/SkyboxCubemap.vert", "Resources/Shaders/SkyboxCubemap/SkyboxCubemap.frag");

    auto simpleLitShader = objectModule.newShader("Resources/Shaders/SimpleLit/SimpleLit.vert", "Resources/Shaders/SimpleLit/SimpleLit.frag");

    auto standardPbrShader = objectModule.newShader("Resources/Shaders/StandardPBR/StandardPBR.vert", "Resources/Shaders/StandardPBR/StandardPBR.frag");

    std::cout << "Shaders compiled" << std::endl;
    Material* unlitColorMat = objectModule.newMaterial(unlitColor, "unlitColorMat", RenderType::Opaque);
    unlitColorMat->setVec4("color", glm::vec4(1.0f, 0.0f, 0.0f, 1.0f));

    Material* unlitSkinnedMat = objectModule.newMaterial(unlitSkinned, "unlitSkinnedMat", RenderType::Opaque);
    unlitSkinnedMat->setVec4("color", glm::vec4(0.0f, 1.0f, 0.0f, 1.0f));

    TextureCreateInfo texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto texture = objectModule.newTexture("Resources/Textures/tex.png", texCreateInfo);

    auto rocks3Diffuse = objectModule.newTexture("Resources/Models/Rocks/diffuse.tga", texCreateInfo);

    auto rocks3Specular = objectModule.newTexture("Resources/Models/Rocks/specular.tga", texCreateInfo);

    auto rocks3Normal = objectModule.newTexture("Resources/Models/Rocks/normal.tga", texCreateInfo);

    auto grass1Diffuse = objectModule.newTexture("Resources/Textures/grassRock/aerial_grass_rock_diff_2k.png", texCreateInfo);

    auto grass1Normal = objectModule.newTexture("Resources/Textures/grassRock/aerial_grass_rock_nor_2k.png", texCreateInfo);

    auto grass1Specular = objectModule.newTexture("Resources/Textures/grassRock/aerial_grass_rock_OccRoughMet_2k.png", texCreateInfo);

    auto gravel1Diffuse = objectModule.newTexture("Resources/Textures/rockGround/rock_ground_02_diff_2k.png", texCreateInfo);

    auto gravel1Normal = objectModule.newTexture("Resources/Textures/rockGround/rock_ground_02_nor_2k.png", texCreateInfo);

    auto gravel1Specular = objectModule.newTexture("Resources/Textures/rockGround/rock_ground_02_rough_ao_2k.png", texCreateInfo);

    auto rocks1Diffuse = objectModule.newTexture("Resources/Textures/rock/rock_04_diff_2k.png", texCreateInfo);

    auto rocks1Normal = objectModule.newTexture("Resources/Textures/rock/rock_04_nor_2k.png", texCreateInfo);

    auto rocks1Specular = objectModule.newTexture("Resources/Textures/rock/rock_04_rough_2k.png", texCreateInfo);

    auto water1Diffuse = objectModule.newTexture("Resources/Textures/water/Water_001_COLOR.png", texCreateInfo);

    auto water1Normal = objectModule.newTexture("Resources/Textures/water/Water_001_NORM.png", texCreateInfo);

    auto water1OccRouSpec = objectModule.newTexture("Resources/Textures/water/Water_001_OccRouSpec.png", texCreateInfo);

    auto barrel1Diffuse = objectModule.newTexture("Resources/Models/RadioactiveBarrel/Barrel_01_Radiation_8-bit_Diffuse.png", texCreateInfo);
    auto barrel1Normal = objectModule.newTexture("Resources/Models/RadioactiveBarrel/Barrel_01_Radiation_8-bit_Normal.png", texCreateInfo);
    auto barrel1OccRouMet = objectModule.newTexture("Resources/Models/RadioactiveBarrel/Barrel_01_Radiation_8-bit_OcclusionRoughnessMetallic.png", texCreateInfo);

    Material* barrel1Mat = objectModule.newMaterial(standardPbrShader, "barrel1Mat", RenderType::Opaque);
    barrel1Mat->setTexture("diffuse", barrel1Diffuse);
    barrel1Mat->setTexture("normal", barrel1Normal);
    barrel1Mat->setTexture("occRouMet", barrel1OccRouMet);

    Material* unlitTextureMat = objectModule.newMaterial(unlitTexture, "unlitTextureMat", RenderType::Opaque);
    unlitTextureMat->setTexture("mainTex", texture);

    Material* unlitInstancedMat = objectModule.newMaterial(unlitInstanced, "unlitInstancedMat", RenderType::Opaque, true);
    unlitInstancedMat->setTexture("mainTex", texture);
    unlitInstancedMat->setVec4("color", glm::vec4(1.0f, 1.0f, 1.0f, 0.25f));

    TextureCreateInfo skyboxCreateInfo = {};
    skyboxCreateInfo.generateMipmaps = true;
    skyboxCreateInfo.magFilter = GL_LINEAR;
    skyboxCreateInfo.minFilter = GL_LINEAR;
    skyboxCreateInfo.wrapMode = GL_CLAMP_TO_EDGE;

    auto cubemap = objectModule.newCubemap(skyboxCreateInfo, 
                                "Resources/Textures/skybox_02/nz.png", 
                                "Resources/Textures/skybox_02/nx.png", 
                                "Resources/Textures/skybox_02/px.png",
                                "Resources/Textures/skybox_02/pz.png",
                                "Resources/Textures/skybox_02/py.png",
                                "Resources/Textures/skybox_02/ny.png");

    Material* skyboxMat = objectModule.newMaterial(skyboxShader, "skyboxMat", RenderType::Opaque);
    skyboxMat->setCubemap("cubemap", cubemap);

    Material* cliffsMat = objectModule.newMaterial(unlitColor, "cliffsMat", RenderType::Opaque);
    cliffsMat->setVec4("color", glm::vec4(0.678f, 0.262f, 0.0f, 1.0f));

    Material* riverBedMat = objectModule.newMaterial(unlitColor, "riverBedMat", RenderType::Opaque);
    riverBedMat->setVec4("color", glm::vec4(0.407f, 0.2f, 0.070f, 1.0f));

    Material* riverBankMat = objectModule.newMaterial(unlitColor, "riverBankMat", RenderType::Opaque);
    riverBankMat->setVec4("color", glm::vec4(0.333f, 0.741f, 0.278f, 1.0f));

    Material* simpleLitMat = objectModule.newMaterial(simpleLitShader, "simpleLitMat", RenderType::Opaque);
    simpleLitMat->setTexture("diffuse", rocks3Diffuse);
    simpleLitMat->setTexture("specular", rocks3Specular);

    Material* grassMat = objectModule.newMaterial(standardPbrShader, "grassMat", RenderType::Opaque);
    grassMat->setTexture("diffuse", grass1Diffuse);
    grassMat->setTexture("normal", grass1Normal);
    grassMat->setTexture("occRouMet", grass1Specular);

    Material* gravelMat = objectModule.newMaterial(standardPbrShader, "gravelMat", RenderType::Opaque);
    gravelMat->setTexture("diffuse", gravel1Diffuse);
    gravelMat->setTexture("normal", gravel1Normal);
    gravelMat->setTexture("occRouMet", gravel1Specular);

    Material* rocksMat = objectModule.newMaterial(standardPbrShader, "rocksMat", RenderType::Opaque);
    rocksMat->setTexture("diffuse", rocks1Diffuse);
    rocksMat->setTexture("normal", rocks1Normal);
    rocksMat->setTexture("occRouMet", rocks1Specular); 

    Material* waterMat = objectModule.newMaterial(standardPbrShader, "waterMat", RenderType::Transparent);
    waterMat->setTexture("diffuse", water1Diffuse);
    waterMat->setTexture("normal", water1Normal);
    waterMat->setTexture("occRouMet", water1OccRouSpec);

#pragma endregion

#pragma region Entities

    {
        Entity* entity = objectModule.getEntityPtrByName("barrel_biohazard");
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = barrel1Mat;

        auto t = entity->getComponentPtr<Transform>();
            t->getLocalScaleModifiable() = { 0.25f, 0.25f, 0.25f };
    }

    {
        Entity* entity = objectModule.getEntityPtrByName("test_riverbed");
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = grassMat;
    }

    {
        Entity* entity = objectModule.getEntityPtrByName("rocks_03");
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = simpleLitMat;

            auto t = entity->getComponentPtr<Transform>();
                t->getLocalPositionModifiable() = { 0.0f, 5.0f, 50.0f };
                t->getLocalRotationModifiable() = glm::angleAxis(glm::radians(90.0f), glm::vec3(1.0f, 0.0f, 0.0f));
                t->getLocalScaleModifiable() = { 0.25f, 0.25f, 0.25f };
    }

    {
        auto entity = objectModule.getEntityPtrByName("Alpha_Surface");
        if(entity != nullptr)
        {
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = unlitSkinnedMat;

            auto t = entity->getComponentPtr<Transform>();
                t->getLocalPositionModifiable() = { 130.0f, 0.0f, -25.0f };
                t->getLocalScaleModifiable() = { 0.3f, 0.3f, 0.3f };
        }
    }

    Entity* terrain = objectModule.newEntity(1, "Terrain");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
        t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(-90, 0, 0));
        t->getLocalPositionModifiable() = glm::vec3(0, -30, 0);
        t->getLocalScaleModifiable() = glm::vec3(5, 5, 5);
        t->setParent(&sceneModule.rootNode);
    }

    {
        auto entity = objectModule.getEntityPtrByName("Water");

        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = waterMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(terrain->getComponentPtr<Transform>());
    }

    {
        auto entity = objectModule.getEntityPtrByName("Cliffs");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = rocksMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(terrain->getComponentPtr<Transform>());
    }

    {
        auto entity = objectModule.getEntityPtrByName("Left_bank");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = grassMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(terrain->getComponentPtr<Transform>());
    }

    {
        auto entity = objectModule.getEntityPtrByName("Right_bank");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = grassMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(terrain->getComponentPtr<Transform>());
    }

    {
        auto entity = objectModule.getEntityPtrByName("Riverbed");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = gravelMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(terrain->getComponentPtr<Transform>());
    }

    {
        auto entity = objectModule.getEntityPtrByName("Alpha_Joints");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = unlitSkinnedMat;

        auto t = entity->getComponentPtr<Transform>();
            t->getLocalPositionModifiable() = { 130.0f, 0.0f, -25.0f };
                t->getLocalScaleModifiable() = { 0.3f, 0.3f, 0.3f };
    }

    {
        auto entity = objectModule.getEntityPtrByName("Sphere001");
        auto t = entity->getComponentPtr<Transform>();
            t->getLocalPositionModifiable() = {-10.5f,0.0f,10.0f};
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = unlitInstancedMat;

        auto c = objectModule.newEmptyComponent<SphereCollider>();
            c->radius = 10;

        entity->addComponent(c);
    }

    {
        auto entity = objectModule.getEntityPtrByName("Box001");
        auto t = entity->getComponentPtr<Transform>();
            t->getLocalPositionModifiable() = {0.0f, 0.0f, 0.0f};
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "directionalLight");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalRotationModifiable() *= glm::angleAxis(glm::radians(190.0f) , glm::vec3(0.0f, 1.0f, 0.0f));
            t->getLocalRotationModifiable() *= glm::angleAxis(glm::radians(45.0f) , glm::vec3(1.0f, 0.0f, 0.0f));
            t->setParent(&sceneModule.rootNode);

        auto l = objectModule.newEmptyComponentForLastEntity<Light>();
            l->lightType = LightType::Directional;
            l->intensity = 1.0f;
            l->color = {1.0f, 1.0f, 1.0f};
    }

    objectModule.newEntity(2, "cubeInstanced1");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 20.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced2");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -20.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced3");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 30.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced4");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -30.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced5");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -30.5f, 10.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced6");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 30.5f, 10.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(4, "Camera");
    {
        auto c = objectModule.newEmptyComponentForLastEntity<Camera>();
        ViewFrustum& frustum = c->getFrustumModifiable();
            frustum.farPlane = 2500.0f;
            frustum.nearPlane = 0.1f;
            frustum.fieldOfView = 80.0f;
            frustum.aspectRatio = (float)GetCore().windowWidth / (float)GetCore().windowHeight;
            c->getProjectionModeModifiable() = CameraProjection::Perspective;

        
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = glm::vec3(0.0f, 0.0f, 0.0f);
            t->setParent(&sceneModule.rootNode);

        auto li = objectModule.newEmptyComponentForLastEntity<AudioListener>();
            li->getIsCurrentModifiable() = true;
            li->getGainModifiable() = 1.0f;
            li->getVelocityModifiable();
            li->getPositionModifiable();
            li->getAtModifiable();
            li->getUpModifiable();
    }

#pragma endregion


objectModule.newEntity(2, "sampleSound");
    {
        auto so3 = objectModule.newEmptyComponentForLastEntity<AudioSource>();
        so3->getListenersModifiable().push_back(objectModule.getEntityPtrByName("Camera")->getComponentPtr<AudioListener>());
        so3->getClipsModifiable().push_back("Resources/Audios/shingeki.wav");
        so3->getIsRelativeModifiable() = true;
        so3->getGainModifiable() = 2.0f;
        so3->getIsLoopingModifiable() = true;
        so3->autoPlay = true;

        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 0.0f, 0.0f, 0.0f };
            t->setParent(&sceneModule.rootNode);
    }

    objectModule.newEntity(4, "sphereSound");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 10.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto c = objectModule.newEmptyComponentForLastEntity<SphereCollider>();
            c->radius = 10;

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/unit_sphere.FBX/Sphere001");
            mr->material = unlitInstancedMat;

        auto so1 = objectModule.newEmptyComponentForLastEntity<AudioSource>();
            so1->getListenersModifiable().push_back(objectModule.getEntityPtrByName("Camera")->getComponentPtr<AudioListener>());
            so1->getClipsModifiable().push_back("Resources/Audios/test.wav");
            so1->getGainModifiable() = 1.5f;
            so1->getIsRelativeModifiable() = false;
            so1->getIsLoopingModifiable() = true;
    }

//Magda scope 19.05.2020
{
    objectModule.newModel("Resources/Models/kajak_wjoslo_plastus.FBX");
    Entity* paddleIndirect = objectModule.newEntity(1, "PaddleIndirect");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->setParent(objectModule.getEntityPtrByName("Player")->getComponentPtr<Transform>());
            t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(0, 90, 90));
            t->getLocalPositionModifiable() = glm::vec3(3, 0, -5.5f);
    }

    Material* paddleMat = objectModule.newMaterial(unlitColor, "paddleMat", RenderType::Opaque);
    paddleMat->setVec4("color", glm::vec4(0.670f, 0.427f, 0.109f, 1.0f));
    {
        auto entity = objectModule.getEntityPtrByName("Paddle");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = paddleMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(paddleIndirect->getComponentPtr<Transform>());

        auto paddle = objectModule.newEmptyComponent<Paddle>();
            paddle->maxPos = glm::vec3(-0.45f, 0.9f, -1.75f);
            paddle->maxFrontRot = -34.5f;
            paddle->maxSideRot = 30.0f;
            entity->addComponent(paddle);
    }

    Material* attachMat = objectModule.newMaterial(unlitColor, "attachMat", RenderType::Opaque);
    attachMat->setVec4("color", glm::vec4(0.521f, 0.478f, 0.078f, 1.0f));
    {
        auto entity = objectModule.getEntityPtrByName("Paddle_attach_right");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = attachMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(objectModule.getEntityPtrByName("Paddle")->getComponentPtr<Transform>());
            t->getLocalPositionModifiable() = glm::vec3(-6, 0, 0);
    }

    {
        auto entity = objectModule.getEntityPtrByName("Paddle_attach_left");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = attachMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(objectModule.getEntityPtrByName("Paddle")->getComponentPtr<Transform>());
            t->getLocalPositionModifiable() = glm::vec3(6, 0, 0);
    }

    Material* playerMat = objectModule.newMaterial(unlitSkinned, "playerMat", RenderType::Opaque);
    playerMat->setVec4("color", glm::vec4(0.878f, 0.749f, 0.321f, 1.0f));
    {
        auto entity = objectModule.getEntityPtrByName("Player");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = playerMat;

            auto t = entity->getComponentPtr<Transform>();
                t->setParent(objectModule.getEntityPtrByName("Kayak")->getComponentPtr<Transform>());
                t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(90, 0, 90));
        }

    Material* kayakMat = objectModule.newMaterial(unlitColor, "kayakMat", RenderType::Opaque);
    kayakMat->setVec4("color", glm::vec4(0.152f, 0.866f, 0.772f, 1.0f));
    {
        auto entity = objectModule.getEntityPtrByName("Kayak");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = kayakMat;

        auto t = entity->getComponentPtr<Transform>();
            t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(-90, 0, 0));
            t->getLocalPositionModifiable() = glm::vec3(-13, 0, -55);
            t->getLocalScaleModifiable() = glm::vec3(2, 2, 2);
            t->setParent(&sceneModule.rootNode);
    }
}

//Andrzej, pół fizyki
{
    Entity* sphere001 = objectModule.getEntityPtrByName("Sphere001");
            Rigidbody* rb001 = objectModule.newEmptyComponent<Rigidbody>();
            rb001->mass = 10;
            rb001->drag = 10;
            rb001->angularDrag = 5;
            rb001->ignoreGravity = false;
            sphere001->addComponent(rb001);

        Entity* sphereSound = objectModule.getEntityPtrByName("sphereSound");
            Rigidbody* rbSound = objectModule.newEmptyComponent<Rigidbody>();
            rbSound->mass = 10;
            rbSound->drag = 5;
            rbSound->angularDrag = 10;
            rbSound->ignoreGravity = false;
            sphereSound->addComponent(rbSound);
        Entity* entity = objectModule.newEntity(5, "PhisicBasedInputTest");
        PhysicalInputKeymap* keymap = objectModule.newEmptyComponentForLastEntity<PhysicalInputKeymap>();
            keymap->continuous[GLFW_KEY_UP   ].force = {   0.0f,  0.0f,  50.0f };
            keymap->continuous[GLFW_KEY_DOWN ].force = {   0.0f,  0.0f, -50.0f };
            keymap->continuous[GLFW_KEY_LEFT ].force = {  50.0f,  0.0f,   0.0f };
            keymap->continuous[GLFW_KEY_RIGHT].force = { -50.0f,  0.0f,   0.0f };
        Transform* transform = objectModule.newEmptyComponentForLastEntity<Transform>();
            transform->setParent(&sceneModule.rootNode);
            transform->getLocalPositionModifiable().x = 50;
            transform->getLocalScaleModifiable() *= 5;
        SphereCollider* collider = objectModule.newEmptyComponentForLastEntity<SphereCollider>();
            collider->radius = 5;
        MeshRenderer* meshRenderer = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            MeshCustom* mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/unit_sphere.FBX/Sphere001");
            Shader* shader = objectModule.getMaterialPtrByName("unlitColorMat")->getShaderPtr();
            Material* material = objectModule.newMaterial(shader, "KULA", RenderType::Opaque);
                material->setVec4("color", glm::vec4(0.2f, 0.1f, 0.3f, 1.0f));

            meshRenderer->material = material;
            meshRenderer->mesh = mesh;
        Rigidbody* rigidbody = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rigidbody->drag = 5;
            rigidbody->angularDrag = 5;
            rigidbody->mass = 10;
            rigidbody->ignoreGravity = true;

}

// Box, and some fixes
{
    //Adding y axis
    {
        auto* pbit = objectModule.getEntityPtrByName("PhisicBasedInputTest");
            auto* map = pbit->getComponentPtr<PhysicalInputKeymap>();
                Impulse up = {glm::vec3(0.0f, 50.0f, 0.0f), glm::vec3(0.0f, 0.0f, 0.0f)};
                Impulse down = {glm::vec3(0.0f, -50.0f, 0.0f), glm::vec3(0.0f, 0.0f, 0.0f)};
                map->continuous.emplace(GLFW_KEY_Z, up);
                map->continuous.emplace(GLFW_KEY_X, down);
    }
    //I fix
    {
        auto* o1 = objectModule.getEntityPtrByName("PhisicBasedInputTest");
            auto* rb1 = o1->getComponentPtr<Rigidbody>();
            auto* sc1 = o1->getComponentPtr<SphereCollider>();
            rb1->momentOfInertia = SphereMomentOfInertia(rb1->mass, sc1->radius);
            
        auto* o2 = objectModule.getEntityPtrByName("Sphere001");
            auto* rb2 = o2->getComponentPtr<Rigidbody>();
            auto* sc2 = o2->getComponentPtr<SphereCollider>();
            rb2->momentOfInertia = SphereMomentOfInertia(rb2->mass, sc2->radius);
            
        auto* o3 = objectModule.getEntityPtrByName("sphereSound");
            auto* rb3 = o3->getComponentPtr<Rigidbody>();
            auto* sc3 = o3->getComponentPtr<SphereCollider>();
            rb3->momentOfInertia = SphereMomentOfInertia(rb3->mass, sc3->radius);
    }
    objectModule.newEntity(4, "TestBox");
    {
        auto* t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = {-50.0f, 0.0, 0.0f};
            t->getLocalScaleModifiable() = {6.0f, 6.0f, 6.0f};
            t->setParent(&sceneModule.rootNode);
        auto* mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = objectModule.getMaterialPtrByName("simpleLitMat");
        auto* rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->angularDrag = 2;
            rb->drag = 10;
            rb->ignoreGravity = false;
            rb->mass = 10;
            rb->momentOfInertia = BoxMomentOfInertia(rb->mass, 6.0f, 6.0f, 6.0f);
        auto* bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {0.5f, 0.5f, 0.5f};
            bc->calculateVert();
    }
}

// PawelKunka - 2020-05-27 - 11:36
//Added Rigidbody and HydroBody to the Kayak entity so it now floats 
{
    auto rigidbody = objectModule.newEmptyComponent<Rigidbody>();
        rigidbody->mass = 60.0f;
        rigidbody->momentOfInertia = BoxMomentOfInertia(60.0f, 18.0f, 5.0f, 90.0f);
        rigidbody->invertedMomentOfInertia = glm::inverse(rigidbody->momentOfInertia);
        rigidbody->drag = 3.0f;
        rigidbody->angularDrag = 3.0f;
        rigidbody->ignoreGravity = true;
    
    auto hydroBody = objectModule.newEmptyComponent<HydroBody>();
    
    auto kayakPtr = objectModule.getEntityPtrByName("Kayak");
        kayakPtr->addComponent(hydroBody);
        kayakPtr->addComponent(rigidbody);
}

// Surface - Andrzej 27.05
{
    auto* ent = objectModule.newEntity(5, "PhysicSurface");
        auto* t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable().y = -35;
            t->getLocalScaleModifiable() = {300, 50, 150};
            t->setParent(&sceneModule.rootNode);
        auto* bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->type = Collider::Type::KINEMATIC;
        auto* rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 2000.0f;
            rb->ignoreGravity = true;
            rb->momentOfInertia = BoxMomentOfInertia(rb->mass, 2.0f * bc->halfSize);
            rb->invertedMomentOfInertia = glm::inverse(rb->momentOfInertia);
        auto* mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = objectModule
                .newMaterial
                (
                    objectModule.getMaterialPtrByName("unlitColorMat")->getShaderPtr(),
                    "Surface",
                    RenderType::Transparent
                );
                mr->material->setVec4("color", glm::vec4(0.15f, 0.8f, 0.3f, 0.2f));
}

// Kayak and hideout
{
    auto* pbit = objectModule.getEntityPtrByName("PhisicBasedInputTest");
    {
        auto* kayak = objectModule.newEmptyComponent<Kayak>();
        pbit->addComponent(kayak);
    }
    
    auto* rushesMat = objectModule.newMaterial
    (
        objectModule.getMaterialPtrByName("unlitColorMat")->getShaderPtr(),
        "RushesMat",
        RenderType::Transparent
    );
        rushesMat->setVec4("color", {0.0f, 0.6f, 0.2f, 0.7f });
    auto* hideout1 = objectModule.newEntity(4,"Hideout1");
    {
        auto* tr = objectModule.newEmptyComponentForLastEntity<Transform>();
            tr->getLocalPositionModifiable() = {50.0f, 0.0f, -50.0f};
            tr->getLocalScaleModifiable() = {20.0f, 10.0f, 20.0f};
            tr->setParent(&sceneModule.rootNode);
        auto* bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->type = Collider::Type::TRIGGER;
        auto* mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath(Models::UnitBox);
            mr->material = rushesMat;
        auto* hid = objectModule.newEmptyComponentForLastEntity<Hideout>();
    }
    
    auto* hideout2 = objectModule.newEntity(4,"Hideout2");
    {
        auto* tr = objectModule.newEmptyComponentForLastEntity<Transform>();
            tr->getLocalPositionModifiable() = {50.0f, 0.0f, -50.0f};
            tr->getLocalScaleModifiable() = {10.0f, 20.0f, 10.0f};
            tr->getLocalRotationModifiable() = glm::quat({0.0f, glm::pi<float>() / 4.0f, 0.0f});
            tr->setParent(&sceneModule.rootNode);
        auto* bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->type = Collider::Type::TRIGGER;
        auto* mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath(Models::UnitBox);
            mr->material = rushesMat;
        auto* hid = objectModule.newEmptyComponentForLastEntity<Hideout>();
    }
}

// Enemy
{
    auto* enemy = objectModule.newEntity(4,"TMP enemy");
    {
        auto* t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = {30.0f, 0.0f, 30.0f};
            t->getLocalScaleModifiable() = {10.0f, 20.0f, 10.0f};
            t->setParent(&sceneModule.rootNode);

        auto* e = objectModule.newEmptyComponentForLastEntity<Enemy>();
            e->detectionCounterMaxValue = 500;
            e->sightDistance = 100.0f;
            e->sightAngle = glm::pi<float>() / 4.0f;

        auto* a = objectModule.newEmptyComponentForLastEntity<EnemyAnimation>();
            a->lerpParameter = 0.25f;

        auto* mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->material = objectModule.getMaterialPtrByName("KULA");
            mr->mesh = objectModule.getMeshCustomPtrByPath(Models::UnitBox);
    }
}