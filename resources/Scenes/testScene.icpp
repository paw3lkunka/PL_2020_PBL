auto unlitTexture = objectModule.newShader("Resources/Shaders/UnlitTexture/UnlitTexture.vert", "Resources/Shaders/UnlitTexture/UnlitTexture.frag");
auto unlitColor = objectModule.newShader("Resources/Shaders/UnlitColor/UnlitColor.vert", "Resources/Shaders/UnlitColor/UnlitColor.frag");
auto skyboxShader = objectModule.newShader("Resources/Shaders/SkyboxCubemap/SkyboxCubemap.vert", "Resources/Shaders/SkyboxCubemap/SkyboxCubemap.frag");
auto unlitInstanced = objectModule.newShader("Resources/Shaders/UnlitBillboardInstanced/UnlitBillboardInstanced.vert", "Resources/Shaders/UnlitBillboardInstanced/UnlitBillboardInstanced.frag");

TextureCreateInfo texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
auto texture = objectModule.newTexture("Resources/Textures/tex.png", texCreateInfo);

objectModule.newModel("Resources/Models/Box.FBX");
objectModule.newModel("Resources/Models/unit_sphere.FBX");

TextureCreateInfo skyboxCreateInfo = {};
    skyboxCreateInfo.generateMipmaps = true;
    skyboxCreateInfo.magFilter = GL_LINEAR;
    skyboxCreateInfo.minFilter = GL_LINEAR;
    skyboxCreateInfo.wrapMode = GL_CLAMP_TO_EDGE;

    auto cubemap = objectModule.newCubemap(skyboxCreateInfo, 
                                "Resources/Textures/skybox_02/nz.png", 
                                "Resources/Textures/skybox_02/nx.png", 
                                "Resources/Textures/skybox_02/px.png",
                                "Resources/Textures/skybox_02/pz.png",
                                "Resources/Textures/skybox_02/py.png",
                                "Resources/Textures/skybox_02/ny.png");

    Material* skyboxMat = objectModule.newMaterial(skyboxShader, "skyboxMat", RenderType::Opaque);
    skyboxMat->setCubemap("cubemap", cubemap);

    Material* unlitInstancedMat = objectModule.newMaterial(unlitInstanced, "unlitInstancedMat", RenderType::Opaque, true);
    unlitInstancedMat->setTexture("mainTex", texture);
    unlitInstancedMat->setVec4("color", glm::vec4(1.0f, 1.0f, 1.0f, 0.25f));

    objectModule.newEntity(4, "Camera");
    {
        auto c = objectModule.newEmptyComponentForLastEntity<Camera>();
        ViewFrustum& frustum = c->getFrustumModifiable();
            frustum.farPlane = 2500.0f;
            frustum.nearPlane = 0.1f;
            frustum.fieldOfView = 80.0f;
            frustum.aspectRatio = (float)GetCore().windowWidth / (float)GetCore().windowHeight;
            c->getProjectionModeModifiable() = CameraProjection::Perspective;

        
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = glm::vec3(0.0f, 0.0f, 0.0f);
            t->setParent(&sceneModule.rootNode);

        auto li = objectModule.newEmptyComponentForLastEntity<AudioListener>();
            li->getIsCurrentModifiable() = true;
            li->getGainModifiable() = 1.0f;
            li->getVelocityModifiable();
            li->getPositionModifiable();
            li->getAtModifiable();
            li->getUpModifiable();
    }

    objectModule.newEntity(2, "cubeInstanced1");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 20.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;
            rb->angularDrag = 0.1f;
            rb->ignoreGravity = true;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {5.0f, 5.0f, 5.0f};
    }

    objectModule.newEntity(2, "cubeInstanced2");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -20.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;
        
            rb->angularDrag = 0.1f;
            rb->ignoreGravity = false;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {5.0f, 5.0f, 5.0f};
    }

    objectModule.newEntity(2, "cubeInstanced3");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 30.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;
        
            rb->angularDrag = 0.1f;
            rb->ignoreGravity = false;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {5.0f, 5.0f, 5.0f};
    }

    objectModule.newEntity(2, "cubeInstanced4");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -30.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;
        
            rb->angularDrag = 0.1f;
            rb->ignoreGravity = true;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {5.0f, 5.0f, 5.0f};
    }

    objectModule.newEntity(2, "cubeInstanced5");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -30.5f, 10.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;

            rb->angularDrag = 0.1f;
            rb->ignoreGravity = false;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {5.0f, 5.0f, 5.0f};
    }

    objectModule.newEntity(2, "cubeInstanced6");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 30.5f, 10.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;
        
            rb->angularDrag = 0.1f;
            rb->ignoreGravity = true;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {5.0f, 5.0f, 5.0f};
    }
    
    objectModule.newEntity(2, "surface");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 0.0f, -50.0f, 0.0f };
            t->getLocalScaleModifiable() = {100, 5, 100};
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->type = rp3d::BodyType::STATIC;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize =  glm::vec3(100, 5, 100) * 0.5f;
    }
    
    Entity* entity = objectModule.newEntity(5, "PhisicBasedInputTest");
    {
        
        PhysicalInputKeymap* keymap = objectModule.newEmptyComponentForLastEntity<PhysicalInputKeymap>();
            keymap->continuous[GLFW_KEY_UP   ].force = {   0.0f,   0.0f,  50.0f };
            keymap->continuous[GLFW_KEY_UP   ].type = Impulse::CENTER_OF_MASS_FORCE;

            keymap->continuous[GLFW_KEY_DOWN ].force = {   0.0f,   0.0f, -50.0f };
            keymap->continuous[GLFW_KEY_DOWN ].type = Impulse::CENTER_OF_MASS_FORCE;

            keymap->continuous[GLFW_KEY_LEFT ].force = {  50.0f,   0.0f,   0.0f };
            keymap->continuous[GLFW_KEY_LEFT ].type = Impulse::CENTER_OF_MASS_FORCE;

            keymap->continuous[GLFW_KEY_RIGHT].force = { -50.0f,   0.0f,   0.0f };
            keymap->continuous[GLFW_KEY_RIGHT].type = Impulse::CENTER_OF_MASS_FORCE;

            keymap->continuous[GLFW_KEY_Z    ].force = {   0.0f,  50.0f,   0.0f };
            keymap->continuous[GLFW_KEY_Z    ].type = Impulse::CENTER_OF_MASS_FORCE;

            keymap->continuous[GLFW_KEY_X    ].force = {   0.0f, -50.0f,   0.0f };
            keymap->continuous[GLFW_KEY_X    ].type = Impulse::CENTER_OF_MASS_FORCE;
        Transform* transform = objectModule.newEmptyComponentForLastEntity<Transform>();
            transform->setParent(&sceneModule.rootNode);
            transform->getLocalPositionModifiable().x = 50;
            transform->getLocalScaleModifiable() *= 5;

        SphereCollider* collider = objectModule.newEmptyComponentForLastEntity<SphereCollider>();
            collider->radius = 5;

        MeshRenderer* meshRenderer = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            MeshCustom* mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/unit_sphere.FBX/Sphere001");
            Shader* shader = unlitColor;
            Material* material = objectModule.newMaterial(shader, "KULA", RenderType::Opaque);
                material->setVec4("color", glm::vec4(0.6f, 0.3f, 0.3f, 1.0f));

            meshRenderer->material = material;
            meshRenderer->mesh = mesh;

        Rigidbody* rigidbody = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rigidbody->drag = 0.2f;
            rigidbody->angularDrag = 0.1;
            rigidbody->mass = 10;
            rigidbody->ignoreGravity = true;
    }