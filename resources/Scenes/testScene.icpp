auto unlitTexture = objectModule.newShader("UnlitTexture", "Resources/Shaders/UnlitTexture/UnlitTexture.vert", "Resources/Shaders/UnlitTexture/UnlitTexture.frag");
auto unlitInstanced = objectModule.newShader("UnlitBillboardInstanced", "Resources/Shaders/UnlitBillboardInstanced/UnlitBillboardInstanced.vert", "Resources/Shaders/UnlitBillboardInstanced/UnlitBillboardInstanced.frag");
auto unlitColor = objectModule.newShader("UnlitColor", "Resources/Shaders/UnlitColor/UnlitColor.vert", "Resources/Shaders/UnlitColor/UnlitColor.frag");
auto unlitSkinned = objectModule.newShader("UnlitSkinned", "Resources/Shaders/UnlitSkinned/UnlitSkinned.vert", "Resources/Shaders/UnlitSkinned/UnlitSkinned.frag");

objectModule.newAudioClip("Resources/Audios/shingeki.wav");
objectModule.newAudioClip("Resources/Audios/river.wav");

TextureCreateInfo texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
auto texture = objectModule.newTexture("Resources/Textures/tex.png", texCreateInfo);

objectModule.newModel("Resources/Models/Box.FBX");
objectModule.newModel("Resources/Models/BoneBox.FBX");
objectModule.newModel("Resources/Models/unit_sphere.FBX");

TextureCreateInfo skyboxCreateInfo = {};
    skyboxCreateInfo.generateMipmaps = true;
    skyboxCreateInfo.magFilter = GL_LINEAR;
    skyboxCreateInfo.minFilter = GL_LINEAR;
    skyboxCreateInfo.wrapMode = GL_CLAMP_TO_EDGE;

CubemapHdr* hdrCubemap = objectModule.newHdrCubemap(skyboxCreateInfo,  "Resources/Textures/skybox_02/nz.hdr", 
                                                    "Resources/Textures/skybox_02/nx.hdr", 
                                                    "Resources/Textures/skybox_02/px.hdr",
                                                    "Resources/Textures/skybox_02/pz.hdr",
                                                    "Resources/Textures/skybox_02/py.hdr",
                                                    "Resources/Textures/skybox_02/ny.hdr");

Shader* skyboxShader = objectModule.newShader("skyboxShader", "Resources/Shaders/SkyboxCubemap/SkyboxCubemap.vert", "Resources/Shaders/SkyboxCubemap/SkyboxCubemap.frag");

Material* hdrSkyboxMat = objectModule.newMaterial(skyboxShader, "skyboxHdrMat", RenderType::Opaque);
hdrSkyboxMat->setTexture("cubemap", hdrCubemap);

GetCore().rendererModule.setSkybox(hdrSkyboxMat);

    Material* unlitInstancedMat = objectModule.newMaterial(unlitInstanced, "unlitInstancedMat", RenderType::Opaque, true);
    {
        unlitInstancedMat->setTexture("mainTex", texture);
        unlitInstancedMat->setVec4("color", glm::vec4(1.0f, 1.0f, 1.0f, 0.25f));
    }

    Material* rushesMat = objectModule.newMaterial(unlitColor, "RushesMat", RenderType::Transparent);
    {
        rushesMat->setVec4("color", glm::vec4(0.0f, 0.7f, 0.2f, 0.7f));
    }

    objectModule.newEntity(4, "Camera");
    {
        auto c = objectModule.newEmptyComponentForLastEntity<Camera>();
        ViewFrustum& frustum = c->getFrustumModifiable();
            frustum.farPlane = 2500.0f;
            frustum.nearPlane = 0.1f;
            frustum.fieldOfView = 80.0f;
            frustum.aspectRatio = (float)GetCore().windowWidth / (float)GetCore().windowHeight;
            c->getProjectionModeModifiable() = CameraProjection::Perspective;

        
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = glm::vec3(0.0f, 0.0f, 0.0f);
            t->setParent(&sceneModule.rootNode);

        auto li = objectModule.newEmptyComponentForLastEntity<AudioListener>();
            li->getIsCurrentModifiable() = true;
            li->getGainModifiable() = 0.5f;
            li->getVelocityModifiable();
            li->getPositionModifiable();
            li->getAtModifiable();
            li->getUpModifiable();
    }

    objectModule.newEntity(2, "cubeInstanced1");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 2.5f, 0.0f, 1.0f };
            t->getLocalScaleModifiable();
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;
            rb->angularDrag = 0.1f;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {0.5f, 0.5f, 0.5f};
    }

    objectModule.newEntity(5, "cubeInstanced2");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -2.5f, 0.0f, 1.0f };
            t->getLocalScaleModifiable();
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;
        
            rb->angularDrag = 0.1f;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {0.5f, 0.5f, 0.5f};

        auto so3 = objectModule.newEmptyComponentForLastEntity<AudioSource>();
            so3->getListenersModifiable().push_back(objectModule.getEntityPtrByName("Camera")->getComponentPtr<AudioListener>());
            so3->getClipsModifiable().push_back("Resources/Audios/shingeki.wav");
            so3->getIsRelativeModifiable() = true;
            so3->getGainModifiable() = 0.1f;
            so3->getIsLoopingModifiable() = true;
            so3->autoPlay = true;
    }

    objectModule.newEntity(2, "cubeInstanced3");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 3.5f, 0.0f, 1.0f };
            t->getLocalScaleModifiable();
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;
        
            rb->angularDrag = 0.1f;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {0.5f, 0.5f, 0.5f};
    }

    objectModule.newEntity(2, "cubeInstanced4");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -3.5f, 0.0f, 1.0f };
            t->getLocalScaleModifiable();
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;
        
            rb->angularDrag = 0.1f;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {0.5f, 0.5f, 0.5f};
    }

    objectModule.newEntity(2, "cubeInstanced5");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -3.5f, 1.0f, 1.0f };
            t->getLocalScaleModifiable();
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;

            rb->angularDrag = 0.1f;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {0.5f, 0.5f, 0.5f};
    }

    objectModule.newEntity(2, "cubeInstanced6");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 3.5f, 1.0f, 1.0f };
            t->getLocalScaleModifiable();
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->mass = 10;
            rb->drag = 0.2f;
        
            rb->angularDrag = 0.1f;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize = {0.5f, 0.5f, 0.5f};
    }
    
    objectModule.newEntity(2, "surface");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 0.0f, -20.0f, 0.0f };
            t->getLocalScaleModifiable() = {100, 0.5, 100};
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;

        auto rb = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rb->type = rp3d::BodyType::STATIC;

        auto bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize =  glm::vec3(100, 0.5, 100) * 0.5f;
    }
    
    Entity* entity = objectModule.newEntity(7, "PhysicBasedInputTest");
    {
        
        PhysicalInputKeymap* keymap = objectModule.newEmptyComponentForLastEntity<PhysicalInputKeymap>();
            keymap->continuous[GLFW_KEY_UP   ].force = {   0.0f,   0.0f,  50.0f };
            keymap->continuous[GLFW_KEY_UP   ].type = Impulse::CENTER_OF_MASS_FORCE;

            keymap->continuous[GLFW_KEY_DOWN ].force = {   0.0f,   0.0f, -50.0f };
            keymap->continuous[GLFW_KEY_DOWN ].type = Impulse::CENTER_OF_MASS_FORCE;

            keymap->continuous[GLFW_KEY_LEFT ].force = {  50.0f,   0.0f,   0.0f };
            keymap->continuous[GLFW_KEY_LEFT ].type = Impulse::CENTER_OF_MASS_FORCE;

            keymap->continuous[GLFW_KEY_RIGHT].force = { -50.0f,   0.0f,   0.0f };
            keymap->continuous[GLFW_KEY_RIGHT].type = Impulse::CENTER_OF_MASS_FORCE;

            keymap->continuous[GLFW_KEY_Z    ].force = {   0.0f,  50.0f,   0.0f };
            keymap->continuous[GLFW_KEY_Z    ].type = Impulse::CENTER_OF_MASS_FORCE;

            keymap->continuous[GLFW_KEY_X    ].force = {   0.0f, -50.0f,   0.0f };
            keymap->continuous[GLFW_KEY_X    ].type = Impulse::CENTER_OF_MASS_FORCE;

        Transform* transform = objectModule.newEmptyComponentForLastEntity<Transform>();
            transform->setParent(&sceneModule.rootNode);
            transform->getLocalPositionModifiable().x = 5;
            transform->getLocalScaleModifiable();

        SphereCollider* collider = objectModule.newEmptyComponentForLastEntity<SphereCollider>();
            collider->radius = 1;

        MeshRenderer* meshRenderer = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            MeshCustom* mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/unit_sphere.FBX/Sphere001");
            Shader* shader = unlitColor;
            Material* material = objectModule.newMaterial(shader, "KULA", RenderType::Opaque, false);
                material->setVec4("color", glm::vec4(0.6f, 0.3f, 0.3f, 1.0f));

            meshRenderer->material = material;
            meshRenderer->mesh = mesh;

        Rigidbody* rigidbody = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rigidbody->drag = 0.2f;
            rigidbody->angularDrag = 0.1;
            rigidbody->mass = 10;
            rigidbody->ignoreGravity = true;

        Kayak* kayak = objectModule.newEmptyComponentForLastEntity<Kayak>();

        //HydroBody* hydroBody = objectModule.newEmptyComponentForLastEntity<HydroBody>();
    }

    auto* hideout1 = objectModule.newEntity(5,"Hideout1");
    {
        auto* tr = objectModule.newEmptyComponentForLastEntity<Transform>();
            tr->getLocalPositionModifiable() = {5.0f, 0.0f, -5.0f};
            tr->getLocalScaleModifiable() = {2.0f, 1.0f, 2.0f};
            tr->setParent(&sceneModule.rootNode);
        auto* bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize =  glm::vec3(1.0f, 0.5f, 1.0f);
            bc->isTrigger = true;
        auto* mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath(Models::UnitBox);
            mr->material = rushesMat;
        auto* hid = objectModule.newEmptyComponentForLastEntity<Hideout>();
        auto* rigidbody = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
    }
    
    auto* hideout2 = objectModule.newEntity(5,"Hideout2");
    {
        auto* tr = objectModule.newEmptyComponentForLastEntity<Transform>();
            tr->getLocalPositionModifiable() = {5.0f, 0.0f, -5.0f};
            tr->getLocalRotationModifiable() = glm::quat({0.0f, glm::pi<float>() / 4.0f, 0.0f});
            tr->getLocalScaleModifiable() = {1.0f, 2.0f, 1.0f};
            tr->setParent(&sceneModule.rootNode);
        auto* bc = objectModule.newEmptyComponentForLastEntity<BoxCollider>();
            bc->halfSize =  glm::vec3(0.5f, 1.0f, 0.5f);
            bc->isTrigger = true;
        auto* mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath(Models::UnitBox);
            mr->material = rushesMat;
        auto* hid = objectModule.newEmptyComponentForLastEntity<Hideout>();
        auto* rigidbody = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
    }

    {
        objectModule.newModel("Resources/Models/Kayak_low_poly.FBX");
        Entity* paddleIndirect = objectModule.newEntity(1, "PaddleIndirect");
        {
            auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
                t->setParent(objectModule.getEntityPtrByName("Kayak_low_poly.FBX/Kayak")->getComponentPtr<Transform>());
                //(objectModule.getEntityPtrByName("Player")->getComponentPtr<Transform>());
                t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(0.0f, 180.0f, 180.0f));
                t->getLocalPositionModifiable() = glm::vec3(0.0f, 0.25f, 1.0f);
        }

        Material* paddleMat = objectModule.newMaterial(unlitColor, "paddleMat", RenderType::Opaque);
        paddleMat->setVec4("color", glm::vec4(0.670f, 0.427f, 0.109f, 1.0f));
        {
            auto entity = objectModule.getEntityPtrByName("Kayak_low_poly.FBX/Paddle");
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = paddleMat;

            auto t = entity->getComponentPtr<Transform>();
                t->setParent(paddleIndirect->getComponentPtr<Transform>());

            auto paddle = objectModule.newEmptyComponent<Paddle>();
                paddle->maxPos = glm::vec3(-0.45f, 0.9f, -1.75f);
                paddle->maxFrontRot = -34.5f;
                paddle->maxSideRot = 30.0f;
                entity->addComponent(paddle);
        }

        /*
        Material* attachMat = objectModule.newMaterial(unlitColor, "attachMat", RenderType::Opaque);
        attachMat->setVec4("color", glm::vec4(0.521f, 0.478f, 0.078f, 1.0f));
        {
            auto entity = objectModule.getEntityPtrByName("Paddle_attach_right");
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = attachMat;

            auto t = entity->getComponentPtr<Transform>();
                t->setParent(objectModule.getEntityPtrByName("Kayak_low_poly.FBX/Paddle")->getComponentPtr<Transform>());
                t->getLocalPositionModifiable() = glm::vec3(-6, 0, 0);
        }

        {
            auto entity = objectModule.getEntityPtrByName("Paddle_attach_left");
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = attachMat;

            auto t = entity->getComponentPtr<Transform>();
                t->setParent(objectModule.getEntityPtrByName("Kayak_low_poly.FBX/Paddle")->getComponentPtr<Transform>());
                t->getLocalPositionModifiable() = glm::vec3(6, 0, 0);
        }
        */

        /*
        Material* playerMat = objectModule.newMaterial(unlitSkinned, "playerMat", RenderType::Opaque);
        playerMat->setVec4("color", glm::vec4(0.878f, 0.749f, 0.321f, 1.0f));
        {
            auto entity = objectModule.getEntityPtrByName("Player");
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = playerMat;

                auto t = entity->getComponentPtr<Transform>();
                    t->setParent(objectModule.getEntityPtrByName("Kayak_low_poly.FBX/Kayak")->getComponentPtr<Transform>());
                    t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(90, 0, 90));
            }
        */

        Material* kayakMat = objectModule.newMaterial(unlitColor, "kayakMat", RenderType::Opaque);
        kayakMat->setVec4("color", glm::vec4(0.152f, 0.866f, 0.772f, 1.0f));
        {
            auto entity = objectModule.getEntityPtrByName("Kayak_low_poly.FBX/Kayak");
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = kayakMat;

            auto t = entity->getComponentPtr<Transform>();
                t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(-90, 0, 0));
                t->getLocalPositionModifiable() = glm::vec3(-13, 0, -55);
                t->getLocalScaleModifiable() = glm::vec3(1.0f, 1.0f, 1.0f);
                t->setParent(&sceneModule.rootNode);
        }

        // KAYAK MAN
        auto kayakRigidbody = objectModule.newEmptyComponent<Rigidbody>();
            kayakRigidbody->drag = 0.2f;
            kayakRigidbody->angularDrag = 0.1f;
            kayakRigidbody->mass = 150.0f;
            kayakRigidbody->ignoreGravity = false;

        auto kayakBoxCollider = objectModule.newEmptyComponent<BoxCollider>();
            kayakBoxCollider->halfSize = glm::vec3(5.0f, 15.0f, 2.0f);

        auto kayakHydroBody = objectModule.newEmptyComponent<HydroBody>();
        
        auto kayakPtr = objectModule.getEntityPtrByName("Kayak_low_poly.FBX/Kayak");
            kayakPtr->addComponent(kayakHydroBody);
            kayakPtr->addComponent(kayakRigidbody);
            kayakPtr->addComponent(kayakBoxCollider);

        // PADDLE MAN
        auto paddleHydroAccelerator = objectModule.newEmptyComponent<HydroAccelerator>();
            paddleHydroAccelerator->rigidbody = kayakRigidbody;
        auto paddleHydroBody = objectModule.newEmptyComponent<HydroBody>();

        auto paddlePtr = objectModule.getEntityPtrByName("Kayak_low_poly.FBX/Paddle");
            paddlePtr->addComponent(paddleHydroAccelerator);
            paddlePtr->addComponent(paddleHydroBody);
    }

    auto* enemy = objectModule.newEntity(4,"TMP enemy");
    {
        auto* t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = {3.0f, 0.0f, 3.0f};
            t->getLocalScaleModifiable() = {1.0f, 2.0f, 1.0f};
            t->setParent(&sceneModule.rootNode);

        auto* e = objectModule.newEmptyComponentForLastEntity<Enemy>();
            e->detectionCounterMaxValue = 500;
            e->sightDistance = 10.0f;
            e->sightAngle = glm::pi<float>() / 4.0f;

        auto* a = objectModule.newEmptyComponentForLastEntity<EnemyAnimation>();
            a->lerpParameter = 0.25f;
            a->shootTrailTime = 0.05f;

        auto* mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->material = objectModule.getMaterialPtrByName("KULA");
            mr->mesh = objectModule.getMeshCustomPtrByPath(Models::UnitBox);
    
        auto* ea = objectModule.newEmptyComponentForLastEntity<EnemyAttack>();
            ea->activationValue = 100;
            ea->incrementValue = 1;
            ea->successChance = 0.5f;
    }

    auto* shootTrail = objectModule.newEntity(4,"Shoot trail");
    {
        auto* t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = {NAN, NAN, NAN};
            t->getLocalScaleModifiable() = {0.03f, 0.03f, 1000.0f};
            //t->setParent(enemy->getComponentPtr<Transform>());
            t->setParent(&sceneModule.rootNode);
            
        auto* mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->material = objectModule.getMaterialPtrByName("KULA");
            mr->mesh = objectModule.getMeshCustomPtrByPath(Models::BoneBox);

        auto* st = objectModule.newEmptyComponentForLastEntity<Shoot>();
    }
