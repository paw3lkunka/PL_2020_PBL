auto unlitTexture = objectModule.newShader("Resources/Shaders/UnlitTexture/UnlitTexture.vert", "Resources/Shaders/UnlitTexture/UnlitTexture.frag");
auto skyboxShader = objectModule.newShader("Resources/Shaders/SkyboxCubemap/SkyboxCubemap.vert", "Resources/Shaders/SkyboxCubemap/SkyboxCubemap.frag");
auto unlitInstanced = objectModule.newShader("Resources/Shaders/UnlitBillboardInstanced/UnlitBillboardInstanced.vert", "Resources/Shaders/UnlitBillboardInstanced/UnlitBillboardInstanced.frag");

TextureCreateInfo texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
auto texture = objectModule.newTexture("Resources/Textures/tex.png", texCreateInfo);

objectModule.newModel("Resources/Models/Box.FBX");

TextureCreateInfo skyboxCreateInfo = {};
    skyboxCreateInfo.generateMipmaps = true;
    skyboxCreateInfo.magFilter = GL_LINEAR;
    skyboxCreateInfo.minFilter = GL_LINEAR;
    skyboxCreateInfo.wrapMode = GL_CLAMP_TO_EDGE;

    auto cubemap = objectModule.newCubemap(skyboxCreateInfo, 
                                "Resources/Textures/skybox_02/nz.png", 
                                "Resources/Textures/skybox_02/nx.png", 
                                "Resources/Textures/skybox_02/px.png",
                                "Resources/Textures/skybox_02/pz.png",
                                "Resources/Textures/skybox_02/py.png",
                                "Resources/Textures/skybox_02/ny.png");

    Material* skyboxMat = objectModule.newMaterial(skyboxShader, "skyboxMat", RenderType::Opaque);
    skyboxMat->setCubemap("cubemap", cubemap);

    Material* unlitInstancedMat = objectModule.newMaterial(unlitInstanced, "unlitInstancedMat", RenderType::Opaque, true);
    unlitInstancedMat->setTexture("mainTex", texture);
    unlitInstancedMat->setVec4("color", glm::vec4(1.0f, 1.0f, 1.0f, 0.25f));

    objectModule.newEntity(4, "Camera");
    {
        auto c = objectModule.newEmptyComponentForLastEntity<Camera>();
            c->farPlane = 10000.0f;
            c->nearPlane = 0.1f;
            c->fieldOfView = 80.0f;
            c->projectionMode = CameraProjection::Perspective;

        
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = glm::vec3(0.0f, 0.0f, 0.0f);
            t->setParent(&sceneModule.rootNode);

        auto li = objectModule.newEmptyComponentForLastEntity<AudioListener>();
            li->getIsCurrentModifiable() = true;
            li->getGainModifiable() = 1.0f;
            li->getVelocityModifiable();
            li->getPositionModifiable();
            li->getAtModifiable();
            li->getUpModifiable();
    }

    objectModule.newEntity(2, "cubeInstanced1");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 20.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced2");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -20.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced3");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 30.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced4");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -30.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced5");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -30.5f, 10.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced6");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 30.5f, 10.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    //Åšmieci z UI, chyba Filipa, nigdy nie pushujcie kodu z -u na mastera
    {
        auto font = objectModule.newFont("Resources/Fonts/KosugiMaru-Regular.ttf", 42, "KosugiMaru-Regular");
        TextureCreateInfo info = {};
        info.format = GL_RGBA;
        info.generateMipmaps = false;
        info.magFilter = GL_LINEAR;
        info.minFilter = GL_LINEAR;
        info.wrapMode = GL_CLAMP_TO_EDGE;
        auto buttonTest = objectModule.newTexture("Resources/Sprites/button_test.png", info);
        auto uiShader = objectModule.newShader("Resources/Shaders/UiStandard/UiStandard.vert", "Resources/Shaders/UiStandard/UiStandard.frag");
        auto uiMaterial = objectModule.newMaterial(uiShader, "UiStandardMat", RenderType::Transparent);
        uiMaterial->setVec4("color", {1.0f, 1.0f, 1.0f, 0.5f});
        uiMaterial->setTexture("sprite", buttonTest);
        auto uiMaterial2 = objectModule.newMaterial(uiShader, "UiStandardMat2", RenderType::Transparent);
        uiMaterial2->setVec4("color", {1.0f, 0.0f, 1.0f, 0.5f});
        uiMaterial2->setTexture("sprite", buttonTest);

        auto redUI = objectModule.newMaterial(uiShader, "redUI", RenderType::Transparent);
        redUI->setVec4("color", {1.0f, 0.0f, 0.0f, 0.5f});
        redUI->setTexture("sprite", buttonTest);
        auto blueUI = objectModule.newMaterial(uiShader, "blueUI", RenderType::Transparent);
        blueUI->setVec4("color", {0.0f, 0.0f, 1.0f, 0.5f});
        blueUI->setTexture("sprite", buttonTest);
        auto greenUI = objectModule.newMaterial(uiShader, "greenUI", RenderType::Transparent);
        greenUI->setVec4("color", {0.0f, 1.0f, 0.0f, 0.5f});
        greenUI->setTexture("sprite", buttonTest);

        auto textMaterial = objectModule.newMaterial(uiShader, "TextMaterial", RenderType::Transparent);
        textMaterial->setVec4("color", {1.0f, 0.0f, 0.0f, 1.0f});
        RectTransform* rootRect;
        objectModule.newEntity(2, "UiTest_leftBottomAnchor");
        {
            rootRect = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            rootRect->getSizeModifiable() = {1024.0f, 256.0f};
            rootRect->getLocalPositionModifiable() = {512.0f, 128.0f};
            rootRect->getAnchorModifiable() = {0.0f, 0.0f};

            uiModule.rootNodes.push_back(rootRect);

            auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
                ui->material = uiMaterial;
        }

        objectModule.newEntity(2, "UiTest2");
        {
            auto rect = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            rect->getSizeModifiable() = {0.5f, 0.5f};
            rect->getLocalPositionModifiable() = {0.0f, 0.0f};
            rect->getAnchorModifiable() = {0.0f, 0.0f};
            rect->setParent(rootRect);

            auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
                ui->material = uiMaterial2;
        }

        objectModule.newEntity(2, "UiTest_rightBottomAnchor");
        {
            auto rootRect = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            rootRect->getSizeModifiable() = {1024.0f, 256.0f};
            rootRect->getLocalPositionModifiable() = {-512.0f, 128.0f};
            rootRect->getAnchorModifiable() = {1.0f, 0.0f};

            uiModule.rootNodes.push_back(rootRect);

            auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
                ui->material = redUI;
        }

        objectModule.newEntity(2, "UiTest_leftTopAnchor");
        {
            auto rootRect = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            rootRect->getSizeModifiable() = {1024.0f, 256.0f};
            rootRect->getLocalPositionModifiable() = {512.0f, -128.0f};
            rootRect->getAnchorModifiable() = {0.0f, 1.0f};

            uiModule.rootNodes.push_back(rootRect);

            auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
                ui->material = blueUI;
        }

        objectModule.newEntity(2, "UiTest_rightTopAnchor");
        {
            auto rootRect = objectModule.newEmptyComponentForLastEntity<RectTransform>();
            rootRect->getSizeModifiable() = {1024.0f, 256.0f};
            rootRect->getLocalPositionModifiable() = {-512.0f, -128.0f};
            rootRect->getAnchorModifiable() = {1.0f, 1.0f};

            uiModule.rootNodes.push_back(rootRect);

            auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
                ui->material = greenUI;
        }

        objectModule.newEntity(3, "ButtonTest");
        {
            auto rt = objectModule.newEmptyComponentForLastEntity<RectTransform>();
                rt->getSizeModifiable() = {0.5f, 0.5f};
                uiModule.rootNodes.push_back(rt);

            auto ui = objectModule.newEmptyComponentForLastEntity<UiRenderer>();
                auto buttMaterial = objectModule.newMaterial(uiShader, "buttonMat", RenderType::Transparent);
                buttMaterial->setTexture("sprite", buttonTest);
                buttMaterial->setVec4("color", {1.0f, 0.0f, 1.0f, 0.5f});
                ui->material = buttMaterial;

            auto butt = objectModule.newEmptyComponentForLastEntity<Button>();
                butt->baseColor = glm::vec4(1.0f, 0.0f, 0.0f, 0.5f);
                butt->highlightedColor = glm::vec4(0.0f, 1.0f, 0.0f, 0.5f);
                butt->onClickColor = glm::vec4(0.0f, 0.0f, 1.0f, 0.5f);
                //butt->onClickEvent = Event::
        }
    }