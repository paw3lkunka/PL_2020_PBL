#pragma region Data Loading
    objectModule.newModel("Resources/Models/unit_sphere.fbx");
    objectModule.newModel("Resources/Models/Cliffs.FBX");
    objectModule.newModel("Resources/Models/Left_bank.FBX");
    objectModule.newModel("Resources/Models/Right_bank.FBX");
    objectModule.newModel("Resources/Models/Riverbed.FBX");
    objectModule.newModel("Resources/Models/Water.FBX");
    objectModule.newModel("Resources/Models/Box.FBX");
    objectModule.newModel("Resources/Models/Rocks/rocks_03.FBX");
    objectModule.newAudioClip("Resources/Audios/sample.wav");
    objectModule.newAudioClip("Resources/Audios/test.wav");

    auto unlitColor = objectModule.newShader("Resources/Shaders/UnlitColor/UnlitColor.vert", "Resources/Shaders/UnlitColor/UnlitColor.frag");

    auto unlitSkinned = objectModule.newShader("Resources/Shaders/UnlitSkinned/UnlitSkinned.vert", "Resources/Shaders/UnlitSkinned/UnlitSkinned.frag");

    auto unlitTexture = objectModule.newShader("Resources/Shaders/UnlitTexture/UnlitTexture.vert", "Resources/Shaders/UnlitTexture/UnlitTexture.frag");

    auto unlitInstanced = objectModule.newShader("Resources/Shaders/UnlitBillboardInstanced/UnlitBillboardInstanced.vert", "Resources/Shaders/UnlitBillboardInstanced/UnlitBillboardInstanced.frag");
    
    auto skyboxShader = objectModule.newShader("Resources/Shaders/SkyboxCubemap/SkyboxCubemap.vert", "Resources/Shaders/SkyboxCubemap/SkyboxCubemap.frag");

    auto simpleLitShader = objectModule.newShader("Resources/Shaders/SimpleLit/SimpleLit.vert", "Resources/Shaders/SimpleLit/SimpleLit.frag");

    std::cout << "Shaders compiled" << std::endl;
    Material* unlitColorMat = objectModule.newMaterial(unlitColor, "unlitColorMat", RenderType::Opaque);
    unlitColorMat->setVec4("color", glm::vec4(1.0f, 0.0f, 0.0f, 1.0f));

    Material* unlitSkinnedMat = objectModule.newMaterial(unlitSkinned, "unlitSkinnedMat", RenderType::Opaque);
    unlitSkinnedMat->setVec4("color", glm::vec4(0.0f, 1.0f, 0.0f, 1.0f));

    TextureCreateInfo texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_CLAMP_TO_EDGE;
    auto texture = objectModule.newTexture("Resources/Textures/tex.png", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_CLAMP_TO_EDGE;
    auto rocks3Diffuse = objectModule.newTexture("Resources/Models/Rocks/diffuse.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_CLAMP_TO_EDGE;
    auto rocks3Specular = objectModule.newTexture("Resources/Models/Rocks/specular.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_CLAMP_TO_EDGE;
    auto rocks3Normal = objectModule.newTexture("Resources/Models/Rocks/normal.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto grass1Diffuse = objectModule.newTexture("Resources/Textures/grass01/diffuse.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto grass1Specular = objectModule.newTexture("Resources/Textures/grass01/specular.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto grass1Normal = objectModule.newTexture("Resources/Textures/grass01/normal.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto gravel1Diffuse = objectModule.newTexture("Resources/Textures/gravel01/diffuse.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto gravel1Specular = objectModule.newTexture("Resources/Textures/gravel01/specular.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto gravel1Normal = objectModule.newTexture("Resources/Textures/gravel01/normal.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto rocks1Diffuse = objectModule.newTexture("Resources/Textures/rocks01/diffuse.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto rocks1Specular = objectModule.newTexture("Resources/Textures/rocks01/specular.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto rocks1Normal = objectModule.newTexture("Resources/Textures/rocks01/normal.tga", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto water1Diffuse = objectModule.newTexture("Resources/Textures/water01/diffuse.png", texCreateInfo);

    texCreateInfo = {};
    texCreateInfo.generateMipmaps = true;
    texCreateInfo.magFilter = GL_LINEAR;
    texCreateInfo.minFilter = GL_LINEAR_MIPMAP_LINEAR;
    texCreateInfo.wrapMode = GL_REPEAT;
    auto water1Specular = objectModule.newTexture("Resources/Textures/water01/specular.png", texCreateInfo);

    Material* unlitTextureMat = objectModule.newMaterial(unlitTexture, "unlitTextureMat", RenderType::Opaque);
    unlitTextureMat->setTexture("mainTex", texture);

    Material* unlitInstancedMat = objectModule.newMaterial(unlitInstanced, "unlitInstancedMat", RenderType::Opaque, true);
    unlitInstancedMat->setTexture("mainTex", texture);
    unlitInstancedMat->setVec4("color", glm::vec4(1.0f, 1.0f, 1.0f, 0.25f));

    TextureCreateInfo skyboxCreateInfo = {};
    skyboxCreateInfo.generateMipmaps = true;
    skyboxCreateInfo.magFilter = GL_LINEAR;
    skyboxCreateInfo.minFilter = GL_LINEAR;
    skyboxCreateInfo.wrapMode = GL_CLAMP_TO_EDGE;

    auto cubemap = objectModule.newCubemap(skyboxCreateInfo, 
                                "Resources/Textures/skybox/nz.png", 
                                "Resources/Textures/skybox/nx.png", 
                                "Resources/Textures/skybox/px.png",
                                "Resources/Textures/skybox/pz.png",
                                "Resources/Textures/skybox/py.png",
                                "Resources/Textures/skybox/ny.png");

    Material* skyboxMat = objectModule.newMaterial(skyboxShader, "skyboxMat", RenderType::Opaque);
    skyboxMat->setCubemap("cubemap", cubemap);

    Material* cliffsMat = objectModule.newMaterial(unlitColor, "cliffsMat", RenderType::Opaque);
    cliffsMat->setVec4("color", glm::vec4(0.678f, 0.262f, 0.0f, 1.0f));

    Material* riverBedMat = objectModule.newMaterial(unlitColor, "riverBedMat", RenderType::Opaque);
    riverBedMat->setVec4("color", glm::vec4(0.407f, 0.2f, 0.070f, 1.0f));

    Material* riverBankMat = objectModule.newMaterial(unlitColor, "riverBankMat", RenderType::Opaque);
    riverBankMat->setVec4("color", glm::vec4(0.333f, 0.741f, 0.278f, 1.0f));

    Material* simpleLitMat = objectModule.newMaterial(simpleLitShader, "simpleLitMat", RenderType::Opaque);
    simpleLitMat->setTexture("diffuse", rocks3Diffuse);
    simpleLitMat->setTexture("specular", rocks3Specular);

    Material* grassMat = objectModule.newMaterial(simpleLitShader, "grassMat", RenderType::Opaque);
    grassMat->setTexture("diffuse", grass1Diffuse);
    grassMat->setTexture("specular", grass1Specular);

    Material* gravelMat = objectModule.newMaterial(simpleLitShader, "gravelMat", RenderType::Opaque);
    gravelMat->setTexture("diffuse", gravel1Diffuse);
    gravelMat->setTexture("specular", gravel1Specular);

    Material* rocksMat = objectModule.newMaterial(simpleLitShader, "rocksMat", RenderType::Opaque);
    rocksMat->setTexture("diffuse", rocks1Diffuse);
    rocksMat->setTexture("specular", rocks1Specular); 

    Material* waterMat = objectModule.newMaterial(simpleLitShader, "waterMat", RenderType::Transparent);
    waterMat->setTexture("diffuse", water1Diffuse);
    waterMat->setTexture("specular", water1Specular);

#pragma endregion

#pragma region Entities

    {
        Entity* entity = objectModule.getEntityPtrByName("rocks_03");
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = simpleLitMat;

            auto t = entity->getComponentPtr<Transform>();
                t->getLocalPositionModifiable() = { 0.0f, 5.0f, 50.0f };
                t->getLocalRotationModifiable() = glm::angleAxis(glm::radians(90.0f), glm::vec3(1.0f, 0.0f, 0.0f));
                t->getLocalScaleModifiable() = { 0.25f, 0.25f, 0.25f };
    }

    {
        auto entity = objectModule.getEntityPtrByName("Alpha_Surface");
        if(entity != nullptr)
        {
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = unlitSkinnedMat;

            auto t = entity->getComponentPtr<Transform>();
                t->getLocalPositionModifiable() = { 30.0f, 0.0f, -25.0f };
                t->getLocalScaleModifiable() = { 0.15f, 0.15f, 0.15f };
        }
    }

    Entity* terrain = objectModule.newEntity(1, "Terrain");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
        t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(-90, 0, 0));
        t->getLocalPositionModifiable() = glm::vec3(0, -30, 0);
        t->getLocalScaleModifiable() = glm::vec3(5, 5, 5);
        t->setParent(&sceneModule.rootNode);
    }

    {
        auto entity = objectModule.getEntityPtrByName("Water");

        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = waterMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(terrain->getComponentPtr<Transform>());
    }

    {
        auto entity = objectModule.getEntityPtrByName("Cliffs");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = rocksMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(terrain->getComponentPtr<Transform>());
    }

    {
        auto entity = objectModule.getEntityPtrByName("Left_bank");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = grassMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(terrain->getComponentPtr<Transform>());
    }

    {
        auto entity = objectModule.getEntityPtrByName("Right_bank");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = grassMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(terrain->getComponentPtr<Transform>());
    }

    {
        auto entity = objectModule.getEntityPtrByName("Riverbed");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = gravelMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(terrain->getComponentPtr<Transform>());
    }

    // {
    //     auto entity = objectModule.getEntityPtrByName("Alpha_Joints");
    //     auto mr = entity->getComponentPtr<MeshRenderer>();
    //         mr->material = unlitSkinnedMat;

    //     auto t = entity->getComponentPtr<Transform>();
    //         t->getLocalPositionModifiable() = { 0.0f, 0.0f, -25.0f };
    // }

    {
        auto entity = objectModule.getEntityPtrByName("Sphere001");
        auto t = entity->getComponentPtr<Transform>();
            t->getLocalPositionModifiable() = {-10.5f,0.0f,10.0f};
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = unlitInstancedMat;

        auto c = objectModule.newEmptyComponent<SphereCollider>();
            c->radius = 10;

        entity->addComponent(c);
    }

    {
        auto entity = objectModule.getEntityPtrByName("Box001");
        auto t = entity->getComponentPtr<Transform>();
            t->getLocalPositionModifiable() = {0.0f, 0.0f, 0.0f};
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "directionalLight");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalRotationModifiable() = glm::angleAxis(glm::radians(25.0f) , glm::vec3(1.0f, 0.0f, 0.0f));
            t->setParent(&sceneModule.rootNode);

        auto l = objectModule.newEmptyComponentForLastEntity<Light>();
            l->lightType = LightType::Directional;
            l->intensity = 1.0f;
            l->color = {1.0f, 1.0f, 1.0f};
    }

    objectModule.newEntity(2, "cubeInstanced1");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 20.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced2");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -20.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced3");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 30.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced4");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -30.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced5");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { -30.5f, 10.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(2, "cubeInstanced6");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 30.5f, 10.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/Box.FBX/Box001");
            mr->material = unlitInstancedMat;
    }

    objectModule.newEntity(4, "Camera");
    {
        auto c = objectModule.newEmptyComponentForLastEntity<Camera>();
            c->farPlane = 10000.0f;
            c->nearPlane = 0.1f;
            c->fieldOfView = 80.0f;
            c->projectionMode = CameraProjection::Perspective;

        
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = glm::vec3(0.0f, 0.0f, 0.0f);
            t->setParent(&sceneModule.rootNode);

        auto li = objectModule.newEmptyComponentForLastEntity<AudioListener>();
            li->getIsCurrentModifiable() = true;
            li->getGainModifiable() = 1.0f;
            li->getVelocityModifiable();
            li->getPositionModifiable();
            li->getAtModifiable();
            li->getUpModifiable();
    }

#pragma endregion


objectModule.newEntity(2, "sampleSound");
    {
        auto so3 = objectModule.newEmptyComponentForLastEntity<AudioSource>();
        so3->getListenersModifiable().push_back(objectModule.getEntityPtrByName("Camera")->getComponentPtr<AudioListener>());
        so3->getClipsModifiable().push_back("Resources/Audios/sample.wav");
        so3->getIsRelativeModifiable() = true;
        so3->getGainModifiable() = 0.1f;
        so3->getIsLoopingModifiable() = true;

        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 0.0f, 0.0f, 0.0f };
            t->setParent(&sceneModule.rootNode);
    }

    objectModule.newEntity(4, "sphereSound");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->getLocalPositionModifiable() = { 10.5f, 0.0f, 10.0f };
            t->getLocalScaleModifiable() *= 10;
            t->setParent(&sceneModule.rootNode);

        auto c = objectModule.newEmptyComponentForLastEntity<SphereCollider>();
            c->radius = 10;

        auto mr = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            mr->mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/unit_sphere.fbx/Sphere001");
            mr->material = unlitInstancedMat;

        auto so1 = objectModule.newEmptyComponentForLastEntity<AudioSource>();
            so1->getListenersModifiable().push_back(objectModule.getEntityPtrByName("Camera")->getComponentPtr<AudioListener>());
            so1->getClipsModifiable().push_back("Resources/Audios/test.wav");
            so1->getGainModifiable() = 100.5f;
            so1->getIsRelativeModifiable() = false;
            so1->getIsLoopingModifiable() = true;
    }

    objectModule.newModel("Resources/Models/kajak_wjoslo_plastus.FBX");

    Entity* paddleIndirect = objectModule.newEntity(1, "PaddleIndirect");
    {
        auto t = objectModule.newEmptyComponentForLastEntity<Transform>();
            t->setParent(objectModule.getEntityPtrByName("Player")->getComponentPtr<Transform>());
            t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(0, 90, 90));
            t->getLocalPositionModifiable() = glm::vec3(3, 0, -5.5f);
    }

    Material* paddleMat = objectModule.newMaterial(unlitColor, "paddleMat", RenderType::Opaque);
    paddleMat->setVec4("color", glm::vec4(0.670f, 0.427f, 0.109f, 1.0f));
    {
        auto entity = objectModule.getEntityPtrByName("Paddle");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = paddleMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(paddleIndirect->getComponentPtr<Transform>());

        auto paddle = objectModule.newEmptyComponent<Paddle>();
            paddle->maxPos = glm::vec3(10.0f, 1.0f, 5.0f);
            entity->addComponent(paddle);
    }

    Material* attachMat = objectModule.newMaterial(unlitColor, "attachMat", RenderType::Opaque);
    attachMat->setVec4("color", glm::vec4(0.521f, 0.478f, 0.078f, 1.0f));
    {
        auto entity = objectModule.getEntityPtrByName("Paddle_attach_right");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = attachMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(objectModule.getEntityPtrByName("Paddle")->getComponentPtr<Transform>());
            t->getLocalPositionModifiable() = glm::vec3(-6, 0, 0);
    }

    {
        auto entity = objectModule.getEntityPtrByName("Paddle_attach_left");
        auto mr = entity->getComponentPtr<MeshRenderer>();
            mr->material = attachMat;

        auto t = entity->getComponentPtr<Transform>();
            t->setParent(objectModule.getEntityPtrByName("Paddle")->getComponentPtr<Transform>());
            t->getLocalPositionModifiable() = glm::vec3(6, 0, 0);
    }

        Material* playerMat = objectModule.newMaterial(unlitSkinned, "playerMat", RenderType::Opaque);
        playerMat->setVec4("color", glm::vec4(0.878f, 0.749f, 0.321f, 1.0f));
        {
            auto entity = objectModule.getEntityPtrByName("Player");
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = playerMat;

            auto t = entity->getComponentPtr<Transform>();
                t->setParent(objectModule.getEntityPtrByName("Kayak")->getComponentPtr<Transform>());
                t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(90, 0, 90));
        }

        Material* kayakMat = objectModule.newMaterial(unlitColor, "kayakMat", RenderType::Opaque);
        kayakMat->setVec4("color", glm::vec4(0.152f, 0.866f, 0.772f, 1.0f));
        {
            auto entity = objectModule.getEntityPtrByName("Kayak");
            auto mr = entity->getComponentPtr<MeshRenderer>();
                mr->material = kayakMat;

            auto t = entity->getComponentPtr<Transform>();
                t->getLocalRotationModifiable() = eulerToQuaternion(glm::vec3(-90, 0, 0));
                t->getLocalPositionModifiable() = glm::vec3(0, 0, -24);
                t->getLocalScaleModifiable() = glm::vec3(2, 2, 2);
                t->setParent(&sceneModule.rootNode);
        }
//Andrzej, pół fizyki
{
    Entity* sphere001 = objectModule.getEntityPtrByName("Sphere001");
            Rigidbody* rb001 = objectModule.newEmptyComponent<Rigidbody>();
            rb001->mass = 10;
            rb001->drag = 5;
            rb001->angularDrag = 5;
            rb001->ignoreGravity = true;
            sphere001->addComponent(rb001);

        Entity* sphereSound = objectModule.getEntityPtrByName("sphereSound");
            Rigidbody* rbSound = objectModule.newEmptyComponent<Rigidbody>();
            rbSound->mass = 10;
            rbSound->drag = 5;
            rbSound->angularDrag = 5;
            rbSound->ignoreGravity = true;
            sphereSound->addComponent(rbSound);
        Entity* entity = objectModule.newEntity(5, "PhisicBasedInputTest");
        PhysicalInputKeymap* keymap = objectModule.newEmptyComponentForLastEntity<PhysicalInputKeymap>();
            keymap->continuous[GLFW_KEY_UP   ].force = {   0.0f,  0.0f,  50.0f };
            keymap->continuous[GLFW_KEY_DOWN ].force = {   0.0f,  0.0f, -50.0f };
            keymap->continuous[GLFW_KEY_LEFT ].force = {  50.0f,  0.0f,   0.0f };
            keymap->continuous[GLFW_KEY_RIGHT].force = { -50.0f,  0.0f,   0.0f };
        Transform* transform = objectModule.newEmptyComponentForLastEntity<Transform>();
            transform->setParent(&sceneModule.rootNode);
            transform->getLocalPositionModifiable().x = 50;
            transform->getLocalScaleModifiable() *= 5;
        SphereCollider* collider = objectModule.newEmptyComponentForLastEntity<SphereCollider>();
            collider->radius = 5;
        MeshRenderer* meshRenderer = objectModule.newEmptyComponentForLastEntity<MeshRenderer>();
            MeshCustom* mesh = objectModule.getMeshCustomPtrByPath("Resources/Models/unit_sphere.fbx/Sphere001");
            Shader* shader = objectModule.getMaterialPtrByName("unlitColorMat")->getShaderPtr();
            Material* material = objectModule.newMaterial(shader, "KULA", RenderType::Opaque);
                material->setVec4("color", glm::vec4(0.2f, 0.1f, 0.3f, 1.0f));

            meshRenderer->material = material;
            meshRenderer->mesh = mesh;

        Rigidbody* rigidbody = objectModule.newEmptyComponentForLastEntity<Rigidbody>();
            rigidbody->drag = 5;
            rigidbody->angularDrag = 5;
            rigidbody->mass = 10;
            rigidbody->ignoreGravity = true;

}